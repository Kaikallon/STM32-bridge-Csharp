<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kvaser.KvaDbLib</name>
    </assembly>
    <members>
        <member name="F:Kvaser.KvadbLib.KvaDbLibDLL.MAX_STRING_SIZE">
            <summary>Maximum string size of strings.</summary>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib">
             <summary>
              The database library kvaDbLib is used for creating, reading, writing and
              modifying CAN databases that holds descriptions of packages that is received
              or sent on the CAN network.
            
              A CAN database contains information about messages. Each message has (among
              other attributes) an identifier, a name and one or several signals. The
              kvaDbLib library is an API for these CAN databases.
             </summary>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetUTF8Bytes(System.String)">
            <summary>
                Create a byte[] containing the utf-8 representation of string stringValue and a terminating'\0' character.
            </summary>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetUTF8String(System.Byte[])">
            <summary>
                Convert byte[] contents to a string object using the utf-8 decoder.
            </summary>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.Open(Kvaser.KvadbLib.Kvadblib.Hnd@)">
            <summary>This function creates a new database handle.</summary>
            <param name="dh">A handle to a new database</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.Create(Kvaser.KvadbLib.Kvadblib.Hnd,System.String,System.String)">
            <summary>This function creates a new database in a handle created with <see cref="M:Kvaser.KvadbLib.Kvadblib.Open(Kvaser.KvadbLib.Kvadblib.Hnd@)"/>.
            There are three ways to call this function:
            * To load data from an existing database file, set localName to null or empty string
            and set filename to the database file.
            * To add an empty database, set localName to any name and set filename to null or empty string.
            * To load data from an existing database file and give it a new name, set localName to the new
            name and set filename to the database file. In this case, it will attempt to use period as decimal
            separator by setting an appropriate locale. Note that setting locale is not thread safe.
            </summary>
            <param name="dh">A database handle</param>
            <param name="localName">The name of the database or null/empty string. The database name is used to
            create qualified names for messages and signals.</param>
            <param name="filename">The database file or null/empty string</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetDatabaseName(Kvaser.KvadbLib.Kvadblib.Hnd,System.String@)">
            <summary>Get the name of a database as a string.</summary>
            <param name="dh">A database handle.</param>
            <param name="name">The database name. The database name is used to create qualified names for messages and signals.</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetVersion(System.Int32@,System.Int32@,System.Int32@)">
            <summary>This function gets the version of the KVADBLIB API DLL (kvadblib.dll).</summary>
            <param name="major">Major version number.</param>
            <param name="minor">Minor version number.</param>
            <param name="build">Build number.</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetErrorText(Kvaser.KvadbLib.Kvadblib.Status,System.String@)">
            <summary>Get the written description for an error code as a string.</summary>
            <param name="error">The error code.</param>
            <param name="errorText">A reference to a string where to place the error text</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetLastParseError(System.String@)">
            <summary>This function retrieves error messages. Run directly after function when receiving error code.
            Currently only applies to <see cref="M:Kvaser.KvadbLib.Kvadblib.Create(Kvaser.KvadbLib.Kvadblib.Hnd,System.String,System.String)"/>, <see cref="M:Kvaser.KvadbLib.Kvadblib.ReadFile(Kvaser.KvadbLib.Kvadblib.Hnd,System.String)"/></summary>
            <param name="errorText">A reference to a string where to place the error message.</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.Close(Kvaser.KvadbLib.Kvadblib.Hnd)">
            <summary>This function closes an open database handle.</summary>
            <param name="dh">A handle to a database</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.WriteFile(Kvaser.KvadbLib.Kvadblib.Hnd,System.String)">
            <summary>Write a database to file. This function will attempt to use period as decimal separator by setting
            an appropriate locale. Note that setting locale is not thread safe.</summary>
            <param name="dh">A handle to a database</param>
            <param name="filename">The name of the database file.</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.ReadFile(Kvaser.KvadbLib.Kvadblib.Hnd,System.String)">
            <summary>Load a database from file into a handle created with <see cref="M:Kvaser.KvadbLib.Kvadblib.Open(Kvaser.KvadbLib.Kvadblib.Hnd@)"/>. This function will attempt to use
            period as decimal separator by setting an appropriate locale. Note: that setting locale is not thread safe.</summary>
            <param name="dh">A handle to a database</param>
            <param name="filename">The name of the database file.</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetFlags(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.DATABASE@)">
            <summary>Get the database flags.</summary>
            <param name="dh">A handle to a database</param>
            <param name="flags">The database flags, <see cref="T:Kvaser.KvadbLib.Kvadblib.DATABASE"/></param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetProtocol(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.ProtocolType@)">
            <summary>Reads the protocol attribute value of a database</summary>
            <param name="dh">A handle to a database</param>
            <param name="prot">A handle to protocol type, KvaDbProtocolType</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetProtocolProperties(Kvaser.KvadbLib.Kvadblib.ProtocolType,Kvaser.KvadbLib.Kvadblib.ProtocolProperties@)">
            <summary>Returns properties of a given protocol, <see cref="T:Kvaser.KvadbLib.Kvadblib.ProtocolProperties"/></summary>
            <param name="prot">Protocol type, <see cref="T:Kvaser.KvadbLib.Kvadblib.ProtocolType"/></param>
            <param name="prop">A handle to protocol properties, <see cref="T:Kvaser.KvadbLib.Kvadblib.ProtocolProperties"/></param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetFirstMsg(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.MessageHnd@)">
            <summary>Get the first message in a database.</summary>
            <param name="dh">A handle to a database</param>
            <param name="mh">A handle to the first message</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetNextMsg(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.MessageHnd@)">
            <summary>Get a handle to the next message in a database. Should be called after <see cref="M:Kvaser.KvadbLib.Kvadblib.GetFirstMsg(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.MessageHnd@)"/>.</summary>
            <param name="dh">A database handle</param>
            <param name="mh">A message handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetMsgById(Kvaser.KvadbLib.Kvadblib.Hnd,System.Int32,Kvaser.KvadbLib.Kvadblib.MessageHnd@)">
            <summary>
            Get a handle to a message with a specific identifier.
            If the message has an extended id, the id should have the <see cref="F:Kvaser.KvadbLib.Kvadblib.MESSAGE.EXT"/> flag set.
            </summary>
            <param name="dh">A database handle</param>
            <param name="id">The selected message identifier</param>
            <param name="mh">A message handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetMsgByIdEx(Kvaser.KvadbLib.Kvadblib.Hnd,System.Int32,Kvaser.KvadbLib.Kvadblib.MESSAGE,Kvaser.KvadbLib.Kvadblib.MessageHnd@)">
            <summary>
            Get a handle to a message with a specific identifier.
            If the message has an extended id, <see cref="F:Kvaser.KvadbLib.Kvadblib.MESSAGE.EXT"/>
            should be set on the flags parameter.
            Bits 31..29 of the id are ignored.
            </summary>
            <param name="dh">A database handle</param>
            <param name="id">The selected message identifier</param>
            <param name="flags">The message flags, <see cref="T:Kvaser.KvadbLib.Kvadblib.MESSAGE"/></param>
            <param name="mh">A message handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetMsgByPGN(Kvaser.KvadbLib.Kvadblib.Hnd,System.Int32,Kvaser.KvadbLib.Kvadblib.MessageHnd@)">
            <summary>
            Get a handle to a message with a specific PGN-identifier. If the message is marked as J1939,
            check if the PGN-part is equal.
            The message identifier needs to contain the <see cref="F:Kvaser.KvadbLib.Kvadblib.MESSAGE.EXT"/> flag.
            Deprecated, use <see cref="M:Kvaser.KvadbLib.Kvadblib.GetMsgByPGNEx(Kvaser.KvadbLib.Kvadblib.Hnd,System.Int32,Kvaser.KvadbLib.Kvadblib.MessageHnd@)"/> instead.
            </summary>
            <param name="dh">A database handle</param>
            <param name="id">The selected message identifier</param>
            <param name="mh">A message handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetMsgByPGNEx(Kvaser.KvadbLib.Kvadblib.Hnd,System.Int32,Kvaser.KvadbLib.Kvadblib.MessageHnd@)">
            <summary>Get a handle to a J1939 message with the PGN-identifier specified.
            All bits in the id that are not part of the PGN are ignored.</summary>
            <param name="dh">A database handle</param>
            <param name="id">The selected message identifier</param>
            <param name="mh">A message handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetMsgByName(Kvaser.KvadbLib.Kvadblib.Hnd,System.String,Kvaser.KvadbLib.Kvadblib.MessageHnd@)">
            <summary>Get a handle to a message with a specific name.</summary>
            <param name="dh">A database handle</param>
            <param name="msg_name">The message name to search for</param>
            <param name="mh">A message handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetMsgName(Kvaser.KvadbLib.Kvadblib.MessageHnd,System.String@)">
            <summary>Get the name of a message as a string.</summary>
            <param name="mh">A message handle</param>
            <param name="buf">The message name</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetMsgQualifiedName(Kvaser.KvadbLib.Kvadblib.MessageHnd,System.String@)">
            <summary>Get the qualified message name, which is the database name and the message name separated by a dot.</summary>
            <param name="mh">A message handle</param>
            <param name="buf">The qualified message name</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetMsgComment(Kvaser.KvadbLib.Kvadblib.MessageHnd,System.String@)">
            <summary>Get the comment for a message as a string.</summary>
            <param name="mh">A message handle</param>
            <param name="buf">The message comment</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetMsgIdEx(Kvaser.KvadbLib.Kvadblib.MessageHnd,System.Int32@)">
            <summary>Get the message identifier.</summary>
            <param name="mh">A message handle</param>
            <param name="id">The message identifier</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetMsgFlags(Kvaser.KvadbLib.Kvadblib.MessageHnd,Kvaser.KvadbLib.Kvadblib.MESSAGE@)">
            <summary>Get the message flags, KVADB_MESSAGE_xxx</summary>
            <param name="mh">A message handle</param>
            <param name="flags">The message flags, <see cref="T:Kvaser.KvadbLib.Kvadblib.MESSAGE"/></param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetMsgDlc(Kvaser.KvadbLib.Kvadblib.MessageHnd,System.Int32@)">
            <summary>Get the data length code for a message.</summary>
            <param name="mh">A message handle</param>
            <param name="dlc">The data length code</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetMsgSendNode(Kvaser.KvadbLib.Kvadblib.MessageHnd,Kvaser.KvadbLib.Kvadblib.NodeHnd@)">
            <summary>Get send node for a message</summary>
            <param name="mh">A message handle</param>
            <param name="nh">A node handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.AddMsg(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.MessageHnd@)">
            <summary>Add a new message to a database.</summary>
            <param name="dh">A database handle</param>
            <param name="mh">A handle to the new message</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.DeleteMsg(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.MessageHnd)">
            <summary>Delete a message from a database.</summary>
            <param name="dh">A database handle</param>
            <param name="mh">A handle to the message that will be deleted</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetFlags(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.DATABASE)">
            <summary>Set the database flags. Note: This feature is currently not enabled.</summary>
            <param name="dh">A database handle</param>
            <param name="flags">The flags to set, <see cref="T:Kvaser.KvadbLib.Kvadblib.DATABASE"/></param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetProtocol(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.ProtocolType)">
            <summary>Writes the protocol attribute value of a database</summary>
            <param name="dh">A handle to a database</param>
            <param name="prot">Protocol type value, <see cref="T:Kvaser.KvadbLib.Kvadblib.ProtocolType"/></param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetMsgName(Kvaser.KvadbLib.Kvadblib.MessageHnd,System.String)">
            <summary>Set the message name.</summary>
            <param name="mh">A message handle</param>
            <param name="buf">The message name.</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetMsgComment(Kvaser.KvadbLib.Kvadblib.MessageHnd,System.String)">
            <summary>Set the message comment.</summary>
            <param name="mh">A message handle</param>
            <param name="buf">The message comment</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetMsgIdEx(Kvaser.KvadbLib.Kvadblib.MessageHnd,System.Int32)">
            <summary>Set the message identifier.</summary>
            <param name="mh">A message handle</param>
            <param name="id">The message identifier</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetMsgFlags(Kvaser.KvadbLib.Kvadblib.MessageHnd,Kvaser.KvadbLib.Kvadblib.MESSAGE)">
            <summary>Set the message flags, KVADB_MESSAGE_xxx</summary>
            <param name="mh">A message handle</param>
            <param name="flags">The message flags, <see cref="T:Kvaser.KvadbLib.Kvadblib.MESSAGE"/></param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetMsgDlc(Kvaser.KvadbLib.Kvadblib.MessageHnd,System.Int32)">
            <summary>Set the data length code for a message.</summary>
            <param name="mh">A message handle</param>
            <param name="dlc">The data length code</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetMsgSendNode(Kvaser.KvadbLib.Kvadblib.MessageHnd,Kvaser.KvadbLib.Kvadblib.NodeHnd)">
            <summary>Set send node for a message</summary>
            <param name="mh">A message handle </param>
            <param name="nh">A node handle </param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetMsgMux(Kvaser.KvadbLib.Kvadblib.MessageHnd,Kvaser.KvadbLib.Kvadblib.SignalHnd@)">
            <summary>Returns handle to a multiplexer signal of a given message. If there are no multiplexer signal,
            <see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> will be returned and sh will be null.</summary>
            <param name="mh">A message handle</param>
            <param name="sh">Multiplexer signal handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetFirstSignal(Kvaser.KvadbLib.Kvadblib.MessageHnd,Kvaser.KvadbLib.Kvadblib.SignalHnd@)">
            <summary>Get the first signal in a message.</summary>
            <param name="mh">A message handle</param>
            <param name="sh">A handle to the first signal</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetNextSignal(Kvaser.KvadbLib.Kvadblib.MessageHnd,Kvaser.KvadbLib.Kvadblib.SignalHnd@)">
            <summary>Get the next signal in a message. Should be called after <see cref="M:Kvaser.KvadbLib.Kvadblib.GetFirstSignal(Kvaser.KvadbLib.Kvadblib.MessageHnd,Kvaser.KvadbLib.Kvadblib.SignalHnd@)"/>.</summary>
            <param name="mh">A message handle</param>
            <param name="sh">A handle to the next signal</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetSignalByName(Kvaser.KvadbLib.Kvadblib.MessageHnd,System.String,Kvaser.KvadbLib.Kvadblib.SignalHnd@)">
            <summary>Get a signal handle by searching for the signals's name.</summary>
            <param name="mh">A message handle</param>
            <param name="buf">The name of the signal to search for</param>
            <param name="sh">A handle to the signal</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetSignalMode(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.SIGNAL_MUX)">
            <summary>Sets signal's multiplex mode. If value is equal to <see cref="F:Kvaser.KvadbLib.Kvadblib.SIGNAL_MUX.MUX"/>, marks signal as a multiplexer.</summary>
            <param name="sh">A signal handle</param>
            <param name="mux">Signal's multiplex mode <see cref="T:Kvaser.KvadbLib.Kvadblib.SIGNAL_MUX"/></param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetSignalMode(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.SIGNAL_MUX@)">
            <summary>Gets mux from multiplexer mode value of given signal. See <see cref="T:Kvaser.KvadbLib.Kvadblib.SIGNAL_MUX"/> for special (negative)
            values of multiplexer mode.</summary>
            <param name="sh">A signal handle</param>
            <param name="mux">Signal's multiplex mode, <see cref="T:Kvaser.KvadbLib.Kvadblib.SIGNAL_MUX"/></param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetSignalMessage(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.MessageHnd@)">
            <summary>Get handle to message, which given signal is associated with.</summary>
            <param name="sh">A signal handle</param>
            <param name="mh">Signal's message</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.RetrieveSignalValuePhys(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.Double@,System.Byte[])">
            <summary>Retrieve signal's physical (floating-point) value from can data.</summary>
            <param name="sh">A signal handle</param>
            <param name="f">The converted value</param>
            <param name="can_data">The data buffer to be converted</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.RetrieveSignalValueRaw(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.Int32@,System.Byte[])">
            <summary>Retrieve signal's raw (integer) value from can data.</summary>
            <param name="sh">A signal handle</param>
            <param name="i">The converted value</param>
            <param name="data">The data buffer to be converted</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.RetrieveSignalValueRaw(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.Int64@,System.Byte[])">
            <summary>Retrieve signal's raw (integer) value from can data.</summary>
            <param name="sh">A signal handle</param>
            <param name="i">The converted value (64-bits)</param>
            <param name="data">The data buffer to be converted</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetSignalValueEnum(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.String@,System.Byte[],System.Int32)">
            <summary>Retrieve signal's enumeration (string) value from can data.</summary>
            <param name="sh">A signal handle</param>
            <param name="buf">The buffer that will hold the enumeration string</param>
            <param name="data">The data buffer to be converted</param>
            <param name="length">The length of the data buffer</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetSignalValueLimits(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.Double@,System.Double@)">
            <summary>Get the minimum and maximum values from a signal.</summary>
            <param name="sh">A signal handle</param>
            <param name="minval">The minimum value</param>
            <param name="maxval">The maximum value</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetSignalValueScaling(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.Double@,System.Double@)">
            <summary>Get the scale factor and offset from a signal.</summary>
            <param name="sh">A signal handle</param>
            <param name="factor">The signal scale factor</param>
            <param name="offset">The signal offset</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetSignalValueSize(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.Int32@,System.Int32@)">
            <summary>Get the size and position of the signal value.</summary>
            <param name="sh">A signal handle</param>
            <param name="startbit">The bit where the signal value starts</param>
            <param name="length">The length of the signal value in bits</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetSignalName(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.String@)">
            <summary>Get the name of a signal as a string.</summary>
            <param name="sh">A signal handle.</param>
            <param name="buf">The signal name.</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetSignalQualifiedName(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.String@)">
            <summary>Get the qualified signal name, which is the database, message and signal names separated by dots, as a string.</summary>
            <param name="sh">A signal handle</param>
            <param name="buf">The qualified signal name</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetSignalComment(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.String@)">
            <summary>Get the comment for a signal as a string.</summary>
            <param name="sh">A signal handle</param>
            <param name="buf">The signal comment</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetSignalUnit(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.String@)">
            <summary>Get the signal unit as a string.</summary>
            <param name="sh">A signal handle</param>
            <param name="buf">The signal unit</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetSignalEncoding(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.SignalEncoding@)">
            <summary>Get the signal encoding.</summary>
            <param name="sh">A signal handle</param>
            <param name="e">The signal encoding, Intel or Motorola, <see cref="T:Kvaser.KvadbLib.Kvadblib.SignalEncoding"/></param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetSignalRepresentationType(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.SignalType@)">
            <summary>Get the signal representation type.</summary>
            <param name="sh">A signal handle</param>
            <param name="t">The signal representation type, <see cref="T:Kvaser.KvadbLib.Kvadblib.SignalType"/></param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.AddSignal(Kvaser.KvadbLib.Kvadblib.MessageHnd,Kvaser.KvadbLib.Kvadblib.SignalHnd@)">
            <summary>Add a new signal to a message.</summary>
            <param name="mh">A message handle</param>
            <param name="sh">A handle to the new signal</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.DeleteSignal(Kvaser.KvadbLib.Kvadblib.MessageHnd,Kvaser.KvadbLib.Kvadblib.SignalHnd)">
            <summary>Delete a signal from a message.</summary>
            <param name="mh">A message handle</param>
            <param name="sh">A handle to the signal to delete</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetSignalValueLimits(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.Double,System.Double)">
            <summary>Set the value limits for a signal.</summary>
            <param name="sh">A signal handle</param>
            <param name="minval">The minimum signal value</param>
            <param name="maxval">The maximum signal value</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetSignalValueScaling(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.Double,System.Double)">
            <summary>Set the scale factor and offset for a signal.</summary>
            <param name="sh">A signal handle</param>
            <param name="factor">The scale factor for the signal value</param>
            <param name="offset">The offset for the signal value</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetSignalValueSize(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.Int32,System.Int32)">
            <summary>Set the value position and size for a signal.</summary>
            <param name="sh">A signal handle</param>
            <param name="startbit">The starting bit of the signal's value</param>
            <param name="length">The length of the value in bits</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetSignalName(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.String)">
            <summary>Set the signal name.</summary>
            <param name="sh">A signal handle</param>
            <param name="buf">The signal name</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetSignalComment(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.String)">
            <summary>Set the signal comment.</summary>
            <param name="sh">A signal handle</param>
            <param name="buf">The signal comment</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetSignalUnit(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.String)">
            <summary>Set the signal unit.</summary>
            <param name="sh">A signal handle</param>
            <param name="buf">The unit for the signal</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetSignalEncoding(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.SignalEncoding)">
            <summary>Set the signal encoding.</summary>
            <param name="sh">A signal handle</param>
            <param name="e">The signal encoding, Intel or Motorola, <see cref="T:Kvaser.KvadbLib.Kvadblib.SignalEncoding"/></param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetSignalRepresentationType(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.SignalType)">
            <summary>Set the signal representation type.</summary>
            <param name="sh">A signal handle</param>
            <param name="t">The signal representation type, <see cref="T:Kvaser.KvadbLib.Kvadblib.SignalType"/></param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetFirstNode(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.NodeHnd@)">
            <summary>Get the first node.</summary>
            <param name="dh">A database handle</param>
            <param name="nh">A node handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetNextNode(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.NodeHnd@)">
            <summary>Get the next node. Should be called after <see cref="M:Kvaser.KvadbLib.Kvadblib.GetFirstNode(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.NodeHnd@)"/>.</summary>
            <param name="dh">A database handle</param>
            <param name="nh">A handle to the next node</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetNodeByName(Kvaser.KvadbLib.Kvadblib.Hnd,System.String,Kvaser.KvadbLib.Kvadblib.NodeHnd@)">
            <summary>Get a node by searching for the node's name.</summary>
            <param name="dh">A database handle</param>
            <param name="node_name">The node name to search for</param>
            <param name="nh">A node handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.AddNode(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.NodeHnd@)">
            <summary>Add a new node to a database.</summary>
            <param name="dh">A database handle</param>
            <param name="nh">A handle to the new node</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.DeleteNode(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.NodeHnd)">
            <summary>Delete a node from a database.</summary>
            <param name="dh">A database handle</param>
            <param name="nh">A handle to the node that will be deleted</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetNodeName(Kvaser.KvadbLib.Kvadblib.NodeHnd,System.String)">
            <summary>Set the node name.</summary>
            <param name="nh">A node handle</param>
            <param name="buf">The node name.</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetNodeName(Kvaser.KvadbLib.Kvadblib.NodeHnd,System.String@)">
            <summary>Get the name of a node as a string.</summary>
            <param name="nh">A node handle</param>
            <param name="buf">The node name</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetNodeComment(Kvaser.KvadbLib.Kvadblib.NodeHnd,System.String)">
            <summary>Set the node comment.</summary>
            <param name="nh">A node handle</param>
            <param name="buf">The node comment</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetNodeComment(Kvaser.KvadbLib.Kvadblib.NodeHnd,System.String@)">
            <summary>Get the comment for a node as a string.</summary>
            <param name="nh">A node handle</param>
            <param name="comment">The node comment</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.AddReceiveNodeToSignal(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.NodeHnd)">
            <summary>Add a receiving node to a signal.</summary>
            <param name="sh">A signal handle</param>
            <param name="nh">A node handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.RemoveReceiveNodeFromSignal(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.NodeHnd)">
            <summary>Remove a receiving node from a signal.</summary>
            <param name="sh">A signal handle</param>
            <param name="nh">A node handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SignalContainsReceiveNode(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.NodeHnd)">
            <summary>Check if a signal contains a specific receiving node</summary>
            <param name="sh">A signal handle</param>
            <param name="nh">A node handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.StoreSignalValuePhys(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.Byte[],System.Int32,System.Double)">
            <summary>Convert a physical signal value to data bytes.</summary>
            <param name="sh">A signal handle</param>
            <param name="can_data">The buffer that will hold the converted value</param>
            <param name="length">The length of the data buffer</param>
            <param name="value">The physical signal value to convert</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.StoreSignalValueRaw(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.Byte[],System.Int32,System.Int32)">
            <summary>Convert a raw signal value to data bytes.</summary>
            <param name="sh">A signal handle</param>
            <param name="can_data">The buffer that will hold the converted value</param>
            <param name="length">The length of the data buffer</param>
            <param name="value">The raw signal value to convert</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.StoreSignalValueRaw(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.Byte[],System.Int64)">
            <summary>Convert a raw signal value to data bytes.</summary>
            <param name="sh">A signal handle</param>
            <param name="can_data">The buffer that will hold the converted value</param>
            <param name="value">The raw signal value to convert (64-bits)</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetFirstAttributeDefinition(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.AttributeDefHnd@)">
            <summary>Get a handle to the first attribute defined in the database.</summary>
            <param name="dh">A handle to a database</param>
            <param name="adh">First attribute definition handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeDefinitionByName(Kvaser.KvadbLib.Kvadblib.Hnd,System.String,Kvaser.KvadbLib.Kvadblib.AttributeDefHnd@)">
            <summary>Get a handle to an attribute definition with specified name.</summary>
            <param name="dh">A handle to a database</param>
            <param name="attrName">The attribute name to search for</param>
            <param name="adh">An attribute definition handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetNextAttributeDefinition(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,Kvaser.KvadbLib.Kvadblib.AttributeDefHnd@)">
            <summary>Get a handle to the following attribute defined.</summary>
            <param name="adh">An existing handle to an attribute definition</param>
            <param name="nadh">Handle to next attribute definition</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeDefinitionType(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,Kvaser.KvadbLib.Kvadblib.AttributeType@)">
            <summary>Get the type for an attribute definition.</summary>
            <param name="adh">A handle to an attribute definition</param>
            <param name="at">The type of the attribute definition</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeDefinitionOwner(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,Kvaser.KvadbLib.Kvadblib.AttributeOwner@)">
            <summary>Get the type for an attribute definition.</summary>
            <param name="adh">A handle to an attribute definition</param>
            <param name="ao">The owner of the attribute definition, kvadb_AttributeOwnerXXX</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeDefinitionName(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,System.String@)">
            <summary>Get the name of an attribute definition as a string.</summary>
            <param name="adh">A handle to an attribute</param>
            <param name="buf">The attribute name</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeDefinitionInt(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,System.Int32@,System.Int32@,System.Int32@)">
            <summary>Get limits and default value for an attribute definition of type integer.</summary>
            <param name="adh">A handle to an attribute definition</param>
            <param name="def">The default value of the attribute definition</param>
            <param name="min">The min value of the attribute definition</param>
            <param name="max">The max value of the attribute definition</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeDefinitionFloat(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,System.Single@,System.Single@,System.Single@)">
            <summary>Get limits and default value for an attribute definition of type float.</summary>
            <param name="adh">A handle to an attribute definition</param>
            <param name="def">The default value of the attribute definition</param>
            <param name="min">The min value of the attribute definition</param>
            <param name="max">The max value of the attribute definition</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeDefinitionString(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,System.String@)">
            <summary>Get default value for an attribute definition of type string as a string.</summary>
            <param name="adh">A handle to an attribute definition </param>
            <param name="buf">The default value of the attribute</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeDefinitionEnumeration(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,System.Int32@)">
            <summary>Get default value for an attribute definition of type enumeration.</summary>
            <param name="adh">A handle to an attribute definition</param>
            <param name="def">The default value of the attribute definition</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.AddAttributeDefinition(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.AttributeDefHnd@)">
            <summary>Add a new attribute definition to a database.</summary>
            <param name="dh">A handle to a database</param>
            <param name="adh">A handle to a new attribute definition</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.DeleteAttributeDefinition(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.AttributeDefHnd)">
            <summary>Delete a database attribute definition. Note: If there are attributes using the attribute definition adh, the
            call will fail and return <see cref="F:Kvaser.KvadbLib.Kvadblib.Status.Err_InUse"/>. Delete these attributes and the call will succeed.</summary>
            <param name="dh">A handle to a database</param>
            <param name="adh">A handle to a attribute definition</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetAttributeDefinitionName(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,System.String)">
            <summary>Set the name of an attribute definition. It is not allowed to have several attribute definitions with same name.</summary>
            <param name="adh">A handle to a attribute definition</param>
            <param name="adName">The name of the attribute definition</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetAttributeDefinitionType(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,Kvaser.KvadbLib.Kvadblib.AttributeType)">
            <summary>Set the type of an attribute definition.</summary>
            <param name="adh">A handle to a attribute definition</param>
            <param name="adType">The type of the attribute definition</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetAttributeDefinitionOwner(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,Kvaser.KvadbLib.Kvadblib.AttributeOwner)">
            <summary>Set the owner of an attribute definition.</summary>
            <param name="adh">A handle to a attribute definition</param>
            <param name="adOwner">The owner of the attribute definition</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.AddAttributeDefinitionEnum(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,System.String,System.Int32)">
            <summary>Add a enumeration value to an attribute definition of enumeration type. If enumeration entry with specified
            value already exists, it will be overwritten. Enumeration entries assume to start with value zero, which is then
            incremented by one for consequent entries.
            Note: In case eValue is out of order, i.e. exceeds maximum value by more than one, or was not started at zero,
            additional dummy entries with name "reserved" will be added to enumeration.</summary>
            <param name="adh">A handle to a attribute definition</param>
            <param name="eName">The name of the enumeration entry</param>
            <param name="eValue">The value of the enumeration entry</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.DeleteAttributeDefinitionEnum(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,System.String,System.Int32)">
            <summary>Deletes the first enumeration entry that matches eName and eValue.</summary>
            <param name="adh">A handle to a attribute definition</param>
            <param name="eName">The name of the enumeration entry</param>
            <param name="eValue">The value of the enumeration entry</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeDefinitionEnumValueByName(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,System.String,System.Int32@)">
            <summary>Get value of an enumeration entry by its name in attribute definition.
            Note: If there are several entries with same name, the minimum value of the entries with the name eName is returned.</summary>
            <param name="adh">A handle to a attribute definition</param>
            <param name="name">The name of the enumeration entry</param>
            <param name="def">The value of the enumeration entry</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeDefinitionEnumNameByValue(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,System.Int32,System.String@)">
            <summary>Get name of an enumeration entry by its value in attribute definition.</summary>
            <param name="adh">A handle to a attribute definition</param>
            <param name="def">The value of the enumeration entry</param>
            <param name="buf">Buffer to receive enumeration name</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeDefinitionEnumFirst(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,System.Int32@,System.String@)">
            <summary>Get name and value for the first enumeration entry for this handle.
            To get the next enumeration entry call <see cref="M:Kvaser.KvadbLib.Kvadblib.GetAttributeDefinitionEnumNext(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,System.Int32@,System.String@)"/>.</summary>
            <param name="adh">A handle to a attribute definition</param>
            <param name="eValue">The value of the enumeration entry</param>
            <param name="eName">The enumeration name</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeDefinitionEnumNext(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,System.Int32@,System.String@)">
            <summary>Get name and value for the next enumeration entry for this handle.</summary>
            <param name="adh">A handle to a attribute definition</param>
            <param name="eValue">The value of the enumeration entry</param>
            <param name="eName">The enumeration name</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetAttributeDefinitionEnumDefault(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,System.Int32)">
            <summary>Set the default enumeration value of an attribute definition of enumeration type.</summary>
            <param name="adh">A handle to a attribute definition</param>
            <param name="dValue">The default value of the enumeration entry</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetAttributeDefinitionInt(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,System.Int32,System.Int32,System.Int32)">
            <summary>Set max, min and default value of an attribute definition of integer type.</summary>
            <param name="adh">A handle to a attribute definition</param>
            <param name="def">The default value</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetAttributeDefinitionFloat(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,System.Single,System.Single,System.Single)">
            <summary>Set max, min and default value of an attribute definition of floating point type.</summary>
            <param name="adh">A handle to a attribute definition</param>
            <param name="def">The default value</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetAttributeDefinitionString(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,System.String)">
            <summary>Set the default value of an attribute definition of string.</summary>
            <param name="adh">A handle to a attribute definition</param>
            <param name="buf">The default value</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.AddMsgAttribute(Kvaser.KvadbLib.Kvadblib.MessageHnd,Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,Kvaser.KvadbLib.Kvadblib.AttributeHnd@)">
            <summary>Add an attribute to a message.</summary>
            <param name="mh">A handle to a message</param>
            <param name="adh">A handle to an attribute definition</param>
            <param name="ah">An attribute handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.AddAttribute(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,Kvaser.KvadbLib.Kvadblib.AttributeHnd@)">
            <summary>Add an attribute to a database.</summary>
            <param name="dh">A handle to a database</param>
            <param name="adh">A handle to an attribute definition</param>
            <param name="ah">An attribute handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.DeleteMsgAttribute(Kvaser.KvadbLib.Kvadblib.MessageHnd,Kvaser.KvadbLib.Kvadblib.AttributeHnd)">
            <summary>Delete an attribute from a message.</summary>
            <param name="mh">A handle to a message</param>
            <param name="ah">A handle to an attribute</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.DeleteAttribute(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.AttributeHnd)">
            <summary>Delete an attribute from a database.</summary>
            <param name="dh">A handle to a message</param>
            <param name="ah">A handle to an attribute</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.AddSignalAttribute(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,Kvaser.KvadbLib.Kvadblib.AttributeHnd@)">
            <summary>Add an attribute to a signal.</summary>
            <param name="sh">A handle to a signal</param>
            <param name="adh">A handle to an attribute definition</param>
            <param name="ah">An attribute handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetFirstEnumValue(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.EnumValueHnd@)">
            <summary>Get the first enumeration value in a signal.</summary>
            <param name="sh">A signal handle</param>
            <param name="eh">A handle to the first enumeration value</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetNextEnumValue(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.EnumValueHnd@)">
            <summary>Get the next enumeration value in a signal. Should be called after <see cref="M:Kvaser.KvadbLib.Kvadblib.GetFirstEnumValue(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.EnumValueHnd@)"/>.</summary>
            <param name="sh">A signal handle</param>
            <param name="eh">A handle to the next enumeration value</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetEnumValue(Kvaser.KvadbLib.Kvadblib.EnumValueHnd,System.Int32@,System.String@)">
            <summary>Get the enumeration value and name.</summary>
            <param name="eh">An enumeration value handle</param>
            <param name="val">The enumeration value</param>
            <param name="buf">The enumeration name</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetFirstEnumValuePair(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.EnumValueHnd@,System.Int32@,System.String@)">
            <summary>Get the enumeration value and name for the first enumeration value for a signal.</summary>
            <param name="sh">A signal handle.</param>
            <param name="eh">An enumeration value handle.</param>
            <param name="val">The enumeration value.</param>
            <param name="buf">The enumeration name.</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetNextEnumValuePair(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.EnumValueHnd@,System.Int32@,System.String@)">
            <summary>Get the enumeration value and name for the next enumeration value for a signal.
            Should be called after <see cref="M:Kvaser.KvadbLib.Kvadblib.GetFirstEnumValuePair(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.EnumValueHnd@,System.Int32@,System.String@)"/>.</summary>
            <param name="sh">A signal handle.</param>
            <param name="eh">An enumeration value handle.</param>
            <param name="val">The enumeration value.</param>
            <param name="buf">The enumeration name.</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.AddEnumValue(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.Int32,System.String)">
            <summary>Add a new enumeration value to a signal.</summary>
            <param name="sh">A signal handle</param>
            <param name="val">The enumeration value</param>
            <param name="buf">The enumeration name</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.DeleteEnumValue(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.EnumValueHnd)">
            <summary>Delete an enumeration value from a signal.</summary>
            <param name="sh">A signal handle</param>
            <param name="eh">An enumeration value handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.DeleteSignalAttribute(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.AttributeHnd)">
            <summary>Delete an attribute from a signal.</summary>
            <param name="sh">A handle to a signal</param>
            <param name="ah">A handle to an attribute</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.AddNodeAttribute(Kvaser.KvadbLib.Kvadblib.NodeHnd,Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,Kvaser.KvadbLib.Kvadblib.AttributeHnd@)">
            <summary>Add an attribute to a node.</summary>
            <param name="nh">A handle to a node</param>
            <param name="adh">A handle to an attribute definition</param>
            <param name="ah">An attribute handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.DeleteNodeAttribute(Kvaser.KvadbLib.Kvadblib.NodeHnd,Kvaser.KvadbLib.Kvadblib.AttributeHnd)">
            <summary>Delete an attribute from a node.</summary>
            <param name="nh">A handle to a node</param>
            <param name="ah">A handle to an attribute</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetFirstMsgAttribute(Kvaser.KvadbLib.Kvadblib.MessageHnd,Kvaser.KvadbLib.Kvadblib.AttributeHnd@)">
            <summary>Get a handle to the first attribute for a message.</summary>
            <param name="mh">A handle to a message</param>
            <param name="ah">An attribute definition handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetMsgAttributeByName(Kvaser.KvadbLib.Kvadblib.MessageHnd,System.String,Kvaser.KvadbLib.Kvadblib.AttributeHnd@)">
            <summary>Get a handle to an attribute with specified name for a message.</summary>
            <param name="mh">A handle to a message</param>
            <param name="attrName">The attribute name to search for</param>
            <param name="ah">An attribute definition handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeByName(Kvaser.KvadbLib.Kvadblib.Hnd,System.String,Kvaser.KvadbLib.Kvadblib.AttributeHnd@)">
            <summary>Get a handle to an attribute with specified name for a database.</summary>
            <param name="dh">A handle to a database</param>
            <param name="attrName">The attribute name to search for</param>
            <param name="ah">An attribute definition handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetFirstSignalAttribute(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.AttributeHnd@)">
            <summary>Get a handle to the first attribute for a signal.</summary>
            <param name="sh">A handle to a signal</param>
            <param name="ah">An attribute handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetSignalAttributeByName(Kvaser.KvadbLib.Kvadblib.SignalHnd,System.String,Kvaser.KvadbLib.Kvadblib.AttributeHnd@)">
            <summary>Get a handle to an attribute with specified name for a signal.</summary>
            <param name="sh">A handle to a signal</param>
            <param name="attrName">The attribute name to search for</param>
            <param name="ah">An attribute definition handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetFirstNodeAttribute(Kvaser.KvadbLib.Kvadblib.NodeHnd,Kvaser.KvadbLib.Kvadblib.AttributeHnd@)">
            <summary>Get a handle to the first attribute for a node.</summary>
            <param name="nh">A handle to a node</param>
            <param name="ah">An attribute definition handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetNodeAttributeByName(Kvaser.KvadbLib.Kvadblib.NodeHnd,System.String,Kvaser.KvadbLib.Kvadblib.AttributeHnd@)">
            <summary>Get a handle to an attribute with specified name for a node.</summary>
            <param name="nh">A handle to a node</param>
            <param name="attrName">The attribute name to search for</param>
            <param name="ah">An attribute definition handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetFirstAttribute(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.AttributeHnd@)">
            <summary>Get a handle to the first attribute for a database</summary>
            <param name="dh">A handle to an database</param>
            <param name="nah">An attribute handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetNextAttribute(Kvaser.KvadbLib.Kvadblib.AttributeHnd,Kvaser.KvadbLib.Kvadblib.AttributeHnd@)">
            <summary>Get a handle to the following attribute.</summary>
            <param name="ah">A handle to an attribute</param>
            <param name="nah">An attribute handle</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeType(Kvaser.KvadbLib.Kvadblib.AttributeHnd,Kvaser.KvadbLib.Kvadblib.AttributeType@)">
            <summary>Get the type for an attribute.</summary>
            <param name="ah">A handle to an attribute</param>
            <param name="at">The type of the attribute</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeName(Kvaser.KvadbLib.Kvadblib.AttributeHnd,System.String@)">
            <summary>Get the name of an attribute as a string.</summary>
            <param name="ah">A handle to an attribute</param>
            <param name="buf">The attribute name</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetAttributeValueInt(Kvaser.KvadbLib.Kvadblib.AttributeHnd,System.Int32)">
            <summary>Set the value for an attribute of type integer.</summary>
            <param name="ah">A handle to an attribute</param>
            <param name="val">The value to set</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeValueInt(Kvaser.KvadbLib.Kvadblib.AttributeHnd,System.Int32@)">
            <summary>Get the value for an attribute of type integer.</summary>
            <param name="ah">A handle to an attribute</param>
            <param name="val">The value of the attribute</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetAttributeValueFloat(Kvaser.KvadbLib.Kvadblib.AttributeHnd,System.Single)">
            <summary>Set the value for an attribute of type float.</summary>
            <param name="ah">A handle to an attribute</param>
            <param name="val">The value to set</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeValueFloat(Kvaser.KvadbLib.Kvadblib.AttributeHnd,System.Single@)">
            <summary>Get the value for an attribute of type float.</summary>
            <param name="ah">A handle to an attribute</param>
            <param name="val">The value of the attribute</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetAttributeValueString(Kvaser.KvadbLib.Kvadblib.AttributeHnd,System.String)">
            <summary>Set the value for an attribute of type string.</summary>
            <param name="ah">A handle to an attribute</param>
            <param name="buf">The attribute value</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeValueString(Kvaser.KvadbLib.Kvadblib.AttributeHnd,System.String@)">
            <summary>Get the value for an attribute of type string as a string.</summary>
            <param name="ah">A handle to an attribute</param>
            <param name="buf">The attribute value</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SetAttributeValueEnumeration(Kvaser.KvadbLib.Kvadblib.AttributeHnd,System.Int32)">
            <summary>Set the value for an attribute of type enumeration.</summary>
            <param name="ah">A handle to an attribute</param>
            <param name="val">The value to set</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.GetAttributeValueEnumeration(Kvaser.KvadbLib.Kvadblib.AttributeHnd,System.Int32@)">
            <summary>Get the value for an attribute of type enumeration.</summary>
            <param name="ah">A handle to an attribute</param>
            <param name="val">The value of the attribute</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.MsgDlcToBytes(Kvaser.KvadbLib.Kvadblib.ProtocolType,System.Int32,System.Int32@)">
            <summary>Translates message dlc to number of bytes for a given protocol</summary>
            <param name="prot">A protocol type</param>
            <param name="dlc">Raw message dlc</param>
            <param name="numBytes">Number of bytes</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.BytesToMsgDlc(Kvaser.KvadbLib.Kvadblib.ProtocolType,System.Int32,System.Int32@)">
            <summary>Translates number of bytes to message dlc for a given protocol</summary>
            <param name="prot">A protocol type</param>
            <param name="numBytes">Number of bytes</param>
            <param name="dlc">Raw message length</param>
            <returns><see cref="F:Kvaser.KvadbLib.Kvadblib.Status.OK"/> (zero) if success. Err_xxx (negative) if failure</returns>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib.MESSAGE">
            <summary>
            Kvaser Database Message flags
            </summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.MESSAGE.EXT">
            <summary>Message is an extended CAN message</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.MESSAGE.J1939">
            <summary>Message uses J1939 protocol. This flag is currently not used.</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.MESSAGE.WAKEUP">
            <summary>Message is a wakeup frame. This flag is currently not used.</summary>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib.SIGNAL_MUX">
            <summary>Kvaser Database Multiplexer Mode values</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.SIGNAL_MUX.NO_MUX">
            <summary>Multiplex mode value of an independent signal</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.SIGNAL_MUX.MUX">
            <summary>Multiplex mode value of a multiplexer signal</summary>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib.AttributeHnd">
            <summary>Attribute handle.</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.AttributeHnd.handle">
            <summary>handle.</summary>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.AttributeHnd.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib.AttributeDefHnd">
            <summary>Attribute definition handle.</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.AttributeDefHnd.handle">
            <summary>handle.</summary>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.AttributeDefHnd.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib.EnumValueHnd">
            <summary>Enum value handle.</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.EnumValueHnd.handle">
            <summary>handle.</summary>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.EnumValueHnd.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib.Hnd">
            <summary>Database handle.</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.Hnd.handle">
            <summary>handle.</summary>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.Hnd.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib.MessageHnd">
            <summary>Message handle.</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.MessageHnd.handle">
            <summary>handle.</summary>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.MessageHnd.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib.NodeHnd">
            <summary>Node handle.</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.NodeHnd.handle">
            <summary>handle.</summary>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.NodeHnd.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib.SignalHnd">
            <summary>Signal handle.</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.SignalHnd.handle">
            <summary>handle.</summary>
        </member>
        <member name="M:Kvaser.KvadbLib.Kvadblib.SignalHnd.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib.DATABASE">
            <summary>The following value is used by <see cref="M:Kvaser.KvadbLib.Kvadblib.GetFlags(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.DATABASE@)"/> and <see cref="M:Kvaser.KvadbLib.Kvadblib.SetFlags(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.DATABASE)"/>. </summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.DATABASE.NONE">
            <summary> None</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.DATABASE.J1939">
            <summary> The database uses the J1939 protocol</summary>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib.Status">
            <summary>
            The following codes are returned by most kvaDbLib API calls.
            Note: Error codes are always negative.
            </summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.Status.OK">
            <summary>OK - no error</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.Status.Err_Fail">
            <summary>General failure</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.Status.Err_NoDatabase">
            <summary>No database was found</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.Status.Err_Param">
            <summary>One or more of the parameters in call is erroneous</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.Status.Err_NoMsg">
            <summary>No message was found</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.Status.Err_NoSignal">
            <summary>No signal was found</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.Status.Err_Internal">
            <summary>An internal error occured in the library</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.Status.Err_DbFileOpen">
            <summary>Could not open the database file</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.Status.Err_DatabaseInternal">
            <summary>An internal error occured in the database handler</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.Status.Err_NoNode">
            <summary>Could not find the database node</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.Status.Err_NoAttrib">
            <summary>No attribute found</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.Status.Err_OnlyOneAllowed">
            <summary>An identical kvaDbLib structure already exists (and only one database at a time can be used).</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.Status.Err_WrongOwner">
            <summary>Wrong owner for attribute</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.Status.Err_InUse">
            <summary>An item is in use</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.Status.Err_BufferSize">
            <summary>The supplied buffer is too small to hold the result</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.Status.Err_DbFileParse">
            <summary>Could not parse the database file</summary>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib.SignalEncoding">
            <summary>The following values are used by <see cref="M:Kvaser.KvadbLib.Kvadblib.GetSignalEncoding(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.SignalEncoding@)"/> and <see cref="M:Kvaser.KvadbLib.Kvadblib.SetSignalEncoding(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.SignalEncoding)"/></summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.SignalEncoding.Intel">
            <summary>Intel</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.SignalEncoding.Motorola">
            <summary>Motorola</summary>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib.SignalType">
            <summary>The type KvaDbSignalType is used by e.g. <see cref="M:Kvaser.KvadbLib.Kvadblib.GetSignalRepresentationType(Kvaser.KvadbLib.Kvadblib.SignalHnd,Kvaser.KvadbLib.Kvadblib.SignalType@)"/>.</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.SignalType.Invalid">
            <summary>Invalid representation</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.SignalType.Signed">
            <summary>Signed integer</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.SignalType.Unsigned">
            <summary>Unsigned integer</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.SignalType.Float">
            <summary>Float, strictly 32 bit long</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.SignalType.Double">
            <summary>Double, strictly 64 bit long</summary>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib.AttributeType">
            <summary>The type KvaDbAttributeType is used by e.g. <see cref="M:Kvaser.KvadbLib.Kvadblib.GetAttributeDefinitionType(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,Kvaser.KvadbLib.Kvadblib.AttributeType@)"/> and <see cref="M:Kvaser.KvadbLib.Kvadblib.GetAttributeType(Kvaser.KvadbLib.Kvadblib.AttributeHnd,Kvaser.KvadbLib.Kvadblib.AttributeType@)"/>.</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.AttributeType.AttributeInvalid">
            <summary>Invalid attribute</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.AttributeType.AttributeInteger">
            <summary>Integer attribute</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.AttributeType.AttributeFloat">
            <summary>Float attribute</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.AttributeType.AttributeEnumeration">
            <summary>Enumeration attribute</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.AttributeType.AttributeString">
            <summary>String attribute</summary>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib.AttributeOwner">
            <summary>The type KvaDbAttributeOwner is used by e.g. <see cref="M:Kvaser.KvadbLib.Kvadblib.GetAttributeDefinitionOwner(Kvaser.KvadbLib.Kvadblib.AttributeDefHnd,Kvaser.KvadbLib.Kvadblib.AttributeOwner@)"/></summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.AttributeOwner.AttributeOwnerInvalid">
            <summary>Invalid owner</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.AttributeOwner.AttributeOwnerDb">
            <summary>Database owner</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.AttributeOwner.AttributeOwnerMessage">
            <summary>Message owner</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.AttributeOwner.AttributeOwnerNode">
            <summary>Node owner</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.AttributeOwner.AttributeOwnerSignal">
            <summary>Signal owner</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.AttributeOwner.AttributeOwnerEnv">
            <summary>Environment owner</summary>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib.ProtocolType">
            <summary>The type ProtocolType is used by e.g. <see cref="M:Kvaser.KvadbLib.Kvadblib.GetProtocol(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.ProtocolType@)"/> and <see cref="M:Kvaser.KvadbLib.Kvadblib.SetProtocol(Kvaser.KvadbLib.Kvadblib.Hnd,Kvaser.KvadbLib.Kvadblib.ProtocolType)"/></summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.ProtocolType.ProtocolCan">
            <summary>Can protocol</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.ProtocolType.ProtocolVan">
            <summary>Van protocol</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.ProtocolType.ProtocolLin">
            <summary>Lin protocol</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.ProtocolType.ProtocolMOST">
            <summary>MOST protocol</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.ProtocolType.ProtocolFlexRay">
            <summary>FlexRay protocol</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.ProtocolType.ProtocolBEAN">
            <summary>BEAN protocol</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.ProtocolType.ProtocolEthernet">
            <summary>Ethernet protocol</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.ProtocolType.ProtocolAFDX">
            <summary>AFDX protocol</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.ProtocolType.ProtocolJ1708">
            <summary>J1708 protocol</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.ProtocolType.ProtocolCanFD">
            <summary>Can FD protocol</summary>
        </member>
        <member name="F:Kvaser.KvadbLib.Kvadblib.ProtocolType.ProtocolUnknown">
            <summary>Unknown or not specified protocol</summary>
        </member>
        <member name="T:Kvaser.KvadbLib.Kvadblib.ProtocolProperties">
             <summary>Struct specifying limits of a given protocol. Used in <see cref="M:Kvaser.KvadbLib.Kvadblib.GetProtocolProperties(Kvaser.KvadbLib.Kvadblib.ProtocolType,Kvaser.KvadbLib.Kvadblib.ProtocolProperties@)"/></summary>
            
             Note: maxMessageDlc provides only raw message dlc limit (e.g. 4 bits for CAN).
        </member>
        <member name="P:Kvaser.KvadbLib.Kvadblib.ProtocolProperties.MaxMessageDlc">
            <summary>MaxMessageDlc</summary>
        </member>
        <member name="P:Kvaser.KvadbLib.Kvadblib.ProtocolProperties.MaxSignalLength">
            <summary>MaxSignalLength</summary>
        </member>
    </members>
</doc>
