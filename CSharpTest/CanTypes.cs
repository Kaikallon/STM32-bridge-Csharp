
// This file was generated automatically by the program CanDbCodeGenerator
// Manual modification is certanly possible, but is disencouraged.
// For manual additions to the database it is better to use the fact the all 
// classes are defined as partial to extend them.

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CanDefinitions;

namespace AmsClient.CanTypes
{
    public static partial class CanMessageTypes
    {
    
        // Generated by GenerateCanMessageTypesBody()
        
        static CanMessageTypes()
        {
            AllCanMessageTypes.Add(161, AccumulatorStackErrors);
            AllCanMessageTypes.Add(1320, IVT_Msg_Result_Wh);
            AllCanMessageTypes.Add(1318, IVT_Msg_Result_W);
            AllCanMessageTypes.Add(241, AmsClientStatus);
            AllCanMessageTypes.Add(168, PrechargeProgress);
            AllCanMessageTypes.Add(175, AmsStatus);
            AllCanMessageTypes.Add(167, AccumulatorMinMaxTemperatures);
            AllCanMessageTypes.Add(166, AccumulatorMinMaxVoltages);
            AllCanMessageTypes.Add(163, AmsCellVoltages);
            AllCanMessageTypes.Add(162, AmsThermistorTemperatures);
            AllCanMessageTypes.Add(1316, IVT_Msg_Result_U3);
            AllCanMessageTypes.Add(1315, IVT_Msg_Result_U2);
            AllCanMessageTypes.Add(1314, IVT_Msg_Result_U1);
            AllCanMessageTypes.Add(1317, IVT_Msg_Result_T);
            AllCanMessageTypes.Add(1313, IVT_Msg_Result_I);
            AllCanMessageTypes.Add(1319, IVT_Msg_Result_As);
        }
        
        public static Dictionary<UInt32, CanMessageType> AllCanMessageTypes = new Dictionary<UInt32, CanMessageType>();
        
        public static CanMessageType AccumulatorStackErrors = new CanMessageType(new List<CanSignalType>{
                CanSignalTypes.AccumulatorStackErrors__stack6_errors,
                CanSignalTypes.AccumulatorStackErrors__stack5_errors,
                CanSignalTypes.AccumulatorStackErrors__stack4_errors,
                CanSignalTypes.AccumulatorStackErrors__stack3_errors,
                CanSignalTypes.AccumulatorStackErrors__stack2_errors,
                CanSignalTypes.AccumulatorStackErrors__stack1_errors,
            })
        {
            Comment       = "",
            DLC           =   1,
            Id            =   161,
            Name          = "AccumulatorStackErrors",
            QualifiedName = "AccumulatorStackErrors",
            SendingNode   = "Ams",
        };
        
        public static CanMessageType IVT_Msg_Result_Wh = new CanMessageType(new List<CanSignalType>{
                CanSignalTypes.IVT_Msg_Result_Wh__IVT_ResultState_And_MsgCount_Wh,
                CanSignalTypes.IVT_Msg_Result_Wh__IVT_Result_Wh,
                CanSignalTypes.IVT_Msg_Result_Wh__IVT_MuxID_Wh,
            })
        {
            Comment       = "",
            DLC           =   6,
            Id            =   1320,
            Name          = "IVT_Msg_Result_Wh",
            QualifiedName = "IVT_Msg_Result_Wh",
            SendingNode   = "IVT",
        };
        
        public static CanMessageType IVT_Msg_Result_W = new CanMessageType(new List<CanSignalType>{
                CanSignalTypes.IVT_Msg_Result_W__IVT_ResultState_And_MsgCount_W,
                CanSignalTypes.IVT_Msg_Result_W__IVT_Result_W,
                CanSignalTypes.IVT_Msg_Result_W__IVT_MuxID_W,
            })
        {
            Comment       = "",
            DLC           =   6,
            Id            =   1318,
            Name          = "IVT_Msg_Result_W",
            QualifiedName = "IVT_Msg_Result_W",
            SendingNode   = "IVT",
        };
        
        public static CanMessageType AmsClientStatus = new CanMessageType(new List<CanSignalType>{
                CanSignalTypes.AmsClientStatus__AmsClient_Trigger_Ams,
                CanSignalTypes.AmsClientStatus__AmsClient_Start_TS,
            })
        {
            Comment       = "",
            DLC           =   1,
            Id            =   241,
            Name          = "AmsClientStatus",
            QualifiedName = "AmsClientStatus",
            SendingNode   = "AmsClient",
        };
        
        public static CanMessageType PrechargeProgress = new CanMessageType(new List<CanSignalType>{
                CanSignalTypes.PrechargeProgress__time_progress,
                CanSignalTypes.PrechargeProgress__fail_air1_open,
                CanSignalTypes.PrechargeProgress__fail_timeout,
                CanSignalTypes.PrechargeProgress__succeeded,
                CanSignalTypes.PrechargeProgress__voltage_progress,
                CanSignalTypes.PrechargeProgress__fail_sdc_open,
                CanSignalTypes.PrechargeProgress__fail_air2_open,
                CanSignalTypes.PrechargeProgress__fail_communication,
            })
        {
            Comment       = "",
            DLC           =   3,
            Id            =   168,
            Name          = "PrechargeProgress",
            QualifiedName = "PrechargeProgress",
            SendingNode   = "Ams",
        };
        
        public static CanMessageType AmsStatus = new CanMessageType(new List<CanSignalType>{
                CanSignalTypes.AmsStatus__Ams_Accumulator_SoC,
                CanSignalTypes.AmsStatus__ams_state,
                CanSignalTypes.AmsStatus__ams_relay_closed,
                CanSignalTypes.AmsStatus__imd_relay_closed,
                CanSignalTypes.AmsStatus__safestate_relay_closed,
                CanSignalTypes.AmsStatus__bspd_relay_closed,
            })
        {
            Comment       = "",
            DLC           =   3,
            Id            =   175,
            Name          = "AmsStatus",
            QualifiedName = "AmsStatus",
            SendingNode   = "Ams",
        };
        
        public static CanMessageType AccumulatorMinMaxTemperatures = new CanMessageType(new List<CanSignalType>{
                CanSignalTypes.AccumulatorMinMaxTemperatures__avg_temperature,
                CanSignalTypes.AccumulatorMinMaxTemperatures__min_temp,
                CanSignalTypes.AccumulatorMinMaxTemperatures__min_temp_thermistor_index,
                CanSignalTypes.AccumulatorMinMaxTemperatures__max_temp,
                CanSignalTypes.AccumulatorMinMaxTemperatures__max_temp_thermistor_index,
            })
        {
            Comment       = "",
            DLC           =   7,
            Id            =   167,
            Name          = "AccumulatorMinMaxTemperatures",
            QualifiedName = "AccumulatorMinMaxTemperatures",
            SendingNode   = "Ams",
        };
        
        public static CanMessageType AccumulatorMinMaxVoltages = new CanMessageType(new List<CanSignalType>{
                CanSignalTypes.AccumulatorMinMaxVoltages__avg_voltage,
                CanSignalTypes.AccumulatorMinMaxVoltages__min_voltage,
                CanSignalTypes.AccumulatorMinMaxVoltages__min_voltage_cell_index,
                CanSignalTypes.AccumulatorMinMaxVoltages__max_voltage,
                CanSignalTypes.AccumulatorMinMaxVoltages__max_voltage_cell_index,
            })
        {
            Comment       = "",
            DLC           =   7,
            Id            =   166,
            Name          = "AccumulatorMinMaxVoltages",
            QualifiedName = "AccumulatorMinMaxVoltages",
            SendingNode   = "Ams",
        };
        
        public static CanMessageType AmsCellVoltages = new CanMessageType(new List<CanSignalType>{
                CanSignalTypes.AmsCellVoltages__cell_offset,
                CanSignalTypes.AmsCellVoltages__voltage_1,
                CanSignalTypes.AmsCellVoltages__voltage_2,
                CanSignalTypes.AmsCellVoltages__voltage_3,
                CanSignalTypes.AmsCellVoltages__voltage_4,
                CanSignalTypes.AmsCellVoltages__voltage_5,
                CanSignalTypes.AmsCellVoltages__voltage_6,
                CanSignalTypes.AmsCellVoltages__voltage_7,
            })
        {
            Comment       = "",
            DLC           =   8,
            Id            =   163,
            Name          = "AmsCellVoltages",
            QualifiedName = "AmsCellVoltages",
            SendingNode   = "Ams",
        };
        
        public static CanMessageType AmsThermistorTemperatures = new CanMessageType(new List<CanSignalType>{
                CanSignalTypes.AmsThermistorTemperatures__thermistor_offset,
                CanSignalTypes.AmsThermistorTemperatures__temperature_1,
                CanSignalTypes.AmsThermistorTemperatures__temperature_2,
                CanSignalTypes.AmsThermistorTemperatures__temperature_3,
                CanSignalTypes.AmsThermistorTemperatures__temperature_4,
                CanSignalTypes.AmsThermistorTemperatures__temperature_5,
                CanSignalTypes.AmsThermistorTemperatures__temperature_6,
                CanSignalTypes.AmsThermistorTemperatures__temperature_7,
            })
        {
            Comment       = "",
            DLC           =   8,
            Id            =   162,
            Name          = "AmsThermistorTemperatures",
            QualifiedName = "AmsThermistorTemperatures",
            SendingNode   = "Ams",
        };
        
        public static CanMessageType IVT_Msg_Result_U3 = new CanMessageType(new List<CanSignalType>{
                CanSignalTypes.IVT_Msg_Result_U3__IVT_ResultState_And_MsgCount_U3,
                CanSignalTypes.IVT_Msg_Result_U3__IVT_Result_U3,
                CanSignalTypes.IVT_Msg_Result_U3__IVT_MuxID_U3,
            })
        {
            Comment       = "",
            DLC           =   6,
            Id            =   1316,
            Name          = "IVT_Msg_Result_U3",
            QualifiedName = "IVT_Msg_Result_U3",
            SendingNode   = "IVT",
        };
        
        public static CanMessageType IVT_Msg_Result_U2 = new CanMessageType(new List<CanSignalType>{
                CanSignalTypes.IVT_Msg_Result_U2__IVT_ResultState_And_MsgCount_U2,
                CanSignalTypes.IVT_Msg_Result_U2__IVT_Result_U2,
                CanSignalTypes.IVT_Msg_Result_U2__IVT_MuxID_U2,
            })
        {
            Comment       = "",
            DLC           =   6,
            Id            =   1315,
            Name          = "IVT_Msg_Result_U2",
            QualifiedName = "IVT_Msg_Result_U2",
            SendingNode   = "IVT",
        };
        
        public static CanMessageType IVT_Msg_Result_U1 = new CanMessageType(new List<CanSignalType>{
                CanSignalTypes.IVT_Msg_Result_U1__IVT_ResultState_And_MsgCount_U1,
                CanSignalTypes.IVT_Msg_Result_U1__IVT_Result_U1,
                CanSignalTypes.IVT_Msg_Result_U1__IVT_MuxID_U1,
            })
        {
            Comment       = "",
            DLC           =   6,
            Id            =   1314,
            Name          = "IVT_Msg_Result_U1",
            QualifiedName = "IVT_Msg_Result_U1",
            SendingNode   = "IVT",
        };
        
        public static CanMessageType IVT_Msg_Result_T = new CanMessageType(new List<CanSignalType>{
                CanSignalTypes.IVT_Msg_Result_T__IVT_ResultState_And_MsgCount_T,
                CanSignalTypes.IVT_Msg_Result_T__IVT_Result_T,
                CanSignalTypes.IVT_Msg_Result_T__IVT_MuxID_T,
            })
        {
            Comment       = "",
            DLC           =   6,
            Id            =   1317,
            Name          = "IVT_Msg_Result_T",
            QualifiedName = "IVT_Msg_Result_T",
            SendingNode   = "IVT",
        };
        
        public static CanMessageType IVT_Msg_Result_I = new CanMessageType(new List<CanSignalType>{
                CanSignalTypes.IVT_Msg_Result_I__IVT_ResultState_And_MsgCount_I,
                CanSignalTypes.IVT_Msg_Result_I__IVT_Result_I,
                CanSignalTypes.IVT_Msg_Result_I__IVT_MuxID_I,
            })
        {
            Comment       = "",
            DLC           =   6,
            Id            =   1313,
            Name          = "IVT_Msg_Result_I",
            QualifiedName = "IVT_Msg_Result_I",
            SendingNode   = "IVT",
        };
        
        public static CanMessageType IVT_Msg_Result_As = new CanMessageType(new List<CanSignalType>{
                CanSignalTypes.IVT_Msg_Result_As__IVT_ResultState_And_MsgCount_As,
                CanSignalTypes.IVT_Msg_Result_As__IVT_Result_As,
                CanSignalTypes.IVT_Msg_Result_As__IVT_MuxID_As,
            })
        {
            Comment       = "",
            DLC           =   6,
            Id            =   1319,
            Name          = "IVT_Msg_Result_As",
            QualifiedName = "IVT_Msg_Result_As",
            SendingNode   = "IVT",
        };
        
    }

    public static partial class CanSignalTypes
    {
    
        // Generated by GenerateCanSignalTypesTypesBody()
        static List<CanSignalType> AllCanSignalTypes = new List<CanSignalType>();
        
        static CanSignalTypes()
        {
            AllCanSignalTypes.Add(AccumulatorStackErrors__stack6_errors); 
            AllCanSignalTypes.Add(AccumulatorStackErrors__stack5_errors); 
            AllCanSignalTypes.Add(AccumulatorStackErrors__stack4_errors); 
            AllCanSignalTypes.Add(AccumulatorStackErrors__stack3_errors); 
            AllCanSignalTypes.Add(AccumulatorStackErrors__stack2_errors); 
            AllCanSignalTypes.Add(AccumulatorStackErrors__stack1_errors); 
            AllCanSignalTypes.Add(IVT_Msg_Result_Wh__IVT_ResultState_And_MsgCount_Wh); 
            AllCanSignalTypes.Add(IVT_Msg_Result_Wh__IVT_Result_Wh); 
            AllCanSignalTypes.Add(IVT_Msg_Result_Wh__IVT_MuxID_Wh); 
            AllCanSignalTypes.Add(IVT_Msg_Result_W__IVT_ResultState_And_MsgCount_W); 
            AllCanSignalTypes.Add(IVT_Msg_Result_W__IVT_Result_W); 
            AllCanSignalTypes.Add(IVT_Msg_Result_W__IVT_MuxID_W); 
            AllCanSignalTypes.Add(AmsClientStatus__AmsClient_Trigger_Ams); 
            AllCanSignalTypes.Add(AmsClientStatus__AmsClient_Start_TS); 
            AllCanSignalTypes.Add(PrechargeProgress__time_progress); 
            AllCanSignalTypes.Add(PrechargeProgress__fail_air1_open); 
            AllCanSignalTypes.Add(PrechargeProgress__fail_timeout); 
            AllCanSignalTypes.Add(PrechargeProgress__succeeded); 
            AllCanSignalTypes.Add(PrechargeProgress__voltage_progress); 
            AllCanSignalTypes.Add(PrechargeProgress__fail_sdc_open); 
            AllCanSignalTypes.Add(PrechargeProgress__fail_air2_open); 
            AllCanSignalTypes.Add(PrechargeProgress__fail_communication); 
            AllCanSignalTypes.Add(AmsStatus__Ams_Accumulator_SoC); 
            AllCanSignalTypes.Add(AmsStatus__ams_state); 
            AllCanSignalTypes.Add(AmsStatus__ams_relay_closed); 
            AllCanSignalTypes.Add(AmsStatus__imd_relay_closed); 
            AllCanSignalTypes.Add(AmsStatus__safestate_relay_closed); 
            AllCanSignalTypes.Add(AmsStatus__bspd_relay_closed); 
            AllCanSignalTypes.Add(AccumulatorMinMaxTemperatures__avg_temperature); 
            AllCanSignalTypes.Add(AccumulatorMinMaxTemperatures__min_temp); 
            AllCanSignalTypes.Add(AccumulatorMinMaxTemperatures__min_temp_thermistor_index); 
            AllCanSignalTypes.Add(AccumulatorMinMaxTemperatures__max_temp); 
            AllCanSignalTypes.Add(AccumulatorMinMaxTemperatures__max_temp_thermistor_index); 
            AllCanSignalTypes.Add(AccumulatorMinMaxVoltages__avg_voltage); 
            AllCanSignalTypes.Add(AccumulatorMinMaxVoltages__min_voltage); 
            AllCanSignalTypes.Add(AccumulatorMinMaxVoltages__min_voltage_cell_index); 
            AllCanSignalTypes.Add(AccumulatorMinMaxVoltages__max_voltage); 
            AllCanSignalTypes.Add(AccumulatorMinMaxVoltages__max_voltage_cell_index); 
            AllCanSignalTypes.Add(AmsCellVoltages__cell_offset); 
            AllCanSignalTypes.Add(AmsCellVoltages__voltage_1); 
            AllCanSignalTypes.Add(AmsCellVoltages__voltage_2); 
            AllCanSignalTypes.Add(AmsCellVoltages__voltage_3); 
            AllCanSignalTypes.Add(AmsCellVoltages__voltage_4); 
            AllCanSignalTypes.Add(AmsCellVoltages__voltage_5); 
            AllCanSignalTypes.Add(AmsCellVoltages__voltage_6); 
            AllCanSignalTypes.Add(AmsCellVoltages__voltage_7); 
            AllCanSignalTypes.Add(AmsThermistorTemperatures__thermistor_offset); 
            AllCanSignalTypes.Add(AmsThermistorTemperatures__temperature_1); 
            AllCanSignalTypes.Add(AmsThermistorTemperatures__temperature_2); 
            AllCanSignalTypes.Add(AmsThermistorTemperatures__temperature_3); 
            AllCanSignalTypes.Add(AmsThermistorTemperatures__temperature_4); 
            AllCanSignalTypes.Add(AmsThermistorTemperatures__temperature_5); 
            AllCanSignalTypes.Add(AmsThermistorTemperatures__temperature_6); 
            AllCanSignalTypes.Add(AmsThermistorTemperatures__temperature_7); 
            AllCanSignalTypes.Add(IVT_Msg_Result_U3__IVT_ResultState_And_MsgCount_U3); 
            AllCanSignalTypes.Add(IVT_Msg_Result_U3__IVT_Result_U3); 
            AllCanSignalTypes.Add(IVT_Msg_Result_U3__IVT_MuxID_U3); 
            AllCanSignalTypes.Add(IVT_Msg_Result_U2__IVT_ResultState_And_MsgCount_U2); 
            AllCanSignalTypes.Add(IVT_Msg_Result_U2__IVT_Result_U2); 
            AllCanSignalTypes.Add(IVT_Msg_Result_U2__IVT_MuxID_U2); 
            AllCanSignalTypes.Add(IVT_Msg_Result_U1__IVT_ResultState_And_MsgCount_U1); 
            AllCanSignalTypes.Add(IVT_Msg_Result_U1__IVT_Result_U1); 
            AllCanSignalTypes.Add(IVT_Msg_Result_U1__IVT_MuxID_U1); 
            AllCanSignalTypes.Add(IVT_Msg_Result_T__IVT_ResultState_And_MsgCount_T); 
            AllCanSignalTypes.Add(IVT_Msg_Result_T__IVT_Result_T); 
            AllCanSignalTypes.Add(IVT_Msg_Result_T__IVT_MuxID_T); 
            AllCanSignalTypes.Add(IVT_Msg_Result_I__IVT_ResultState_And_MsgCount_I); 
            AllCanSignalTypes.Add(IVT_Msg_Result_I__IVT_Result_I); 
            AllCanSignalTypes.Add(IVT_Msg_Result_I__IVT_MuxID_I); 
            AllCanSignalTypes.Add(IVT_Msg_Result_As__IVT_ResultState_And_MsgCount_As); 
            AllCanSignalTypes.Add(IVT_Msg_Result_As__IVT_Result_As); 
            AllCanSignalTypes.Add(IVT_Msg_Result_As__IVT_MuxID_As); 
            foreach (var signal in AllCanSignalTypes)
            {
                signal.CalculateBitMask();
            }
        }
        
        public static CanSignalType AccumulatorStackErrors__stack6_errors = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 5,
            Comment       = "",
            Name          = "stack6_errors",
            QualifiedName = "AccumulatorStackErrors.stack6_errors",
            Unit          = "",
        };
        
        public static CanSignalType AccumulatorStackErrors__stack5_errors = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 4,
            Comment       = "",
            Name          = "stack5_errors",
            QualifiedName = "AccumulatorStackErrors.stack5_errors",
            Unit          = "",
        };
        
        public static CanSignalType AccumulatorStackErrors__stack4_errors = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 3,
            Comment       = "",
            Name          = "stack4_errors",
            QualifiedName = "AccumulatorStackErrors.stack4_errors",
            Unit          = "",
        };
        
        public static CanSignalType AccumulatorStackErrors__stack3_errors = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 2,
            Comment       = "",
            Name          = "stack3_errors",
            QualifiedName = "AccumulatorStackErrors.stack3_errors",
            Unit          = "",
        };
        
        public static CanSignalType AccumulatorStackErrors__stack2_errors = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 1,
            Comment       = "",
            Name          = "stack2_errors",
            QualifiedName = "AccumulatorStackErrors.stack2_errors",
            Unit          = "",
        };
        
        public static CanSignalType AccumulatorStackErrors__stack1_errors = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 0,
            Comment       = "",
            Name          = "stack1_errors",
            QualifiedName = "AccumulatorStackErrors.stack1_errors",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_Wh__IVT_ResultState_And_MsgCount_Wh = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Signed,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 8,
            Comment       = "",
            Name          = "IVT_ResultState_And_MsgCount_Wh",
            QualifiedName = "IVT_Msg_Result_Wh.IVT_ResultState_And_MsgCount_Wh",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_Wh__IVT_Result_Wh = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Signed,
            Length        = 32,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 16,
            Comment       = "",
            Name          = "IVT_Result_Wh",
            QualifiedName = "IVT_Msg_Result_Wh.IVT_Result_Wh",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_Wh__IVT_MuxID_Wh = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 0,
            Comment       = "",
            Name          = "IVT_MuxID_Wh",
            QualifiedName = "IVT_Msg_Result_Wh.IVT_MuxID_Wh",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_W__IVT_ResultState_And_MsgCount_W = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Signed,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 8,
            Comment       = "",
            Name          = "IVT_ResultState_And_MsgCount_W",
            QualifiedName = "IVT_Msg_Result_W.IVT_ResultState_And_MsgCount_W",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_W__IVT_Result_W = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Signed,
            Length        = 32,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 16,
            Comment       = "",
            Name          = "IVT_Result_W",
            QualifiedName = "IVT_Msg_Result_W.IVT_Result_W",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_W__IVT_MuxID_W = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 0,
            Comment       = "",
            Name          = "IVT_MuxID_W",
            QualifiedName = "IVT_Msg_Result_W.IVT_MuxID_W",
            Unit          = "",
        };
        
        public static CanSignalType AmsClientStatus__AmsClient_Trigger_Ams = new CanSignalType(new List<string>{
            "Ams", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 0,
            Comment       = "",
            Name          = "AmsClient_Trigger_Ams",
            QualifiedName = "AmsClientStatus.AmsClient_Trigger_Ams",
            Unit          = "",
        };
        
        public static CanSignalType AmsClientStatus__AmsClient_Start_TS = new CanSignalType(new List<string>{
            "Ams", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 255,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 1,
            Comment       = "",
            Name          = "AmsClient_Start_TS",
            QualifiedName = "AmsClientStatus.AmsClient_Start_TS",
            Unit          = "",
        };
        
        public static CanSignalType PrechargeProgress__time_progress = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 100,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 0,
            Comment       = "",
            Name          = "time_progress",
            QualifiedName = "PrechargeProgress.time_progress",
            Unit          = "%",
        };
        
        public static CanSignalType PrechargeProgress__fail_air1_open = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 17,
            Comment       = "",
            Name          = "fail_air1_open",
            QualifiedName = "PrechargeProgress.fail_air1_open",
            Unit          = "flag",
        };
        
        public static CanSignalType PrechargeProgress__fail_timeout = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 18,
            Comment       = "",
            Name          = "fail_timeout",
            QualifiedName = "PrechargeProgress.fail_timeout",
            Unit          = "flag",
        };
        
        public static CanSignalType PrechargeProgress__succeeded = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 16,
            Comment       = "",
            Name          = "succeeded",
            QualifiedName = "PrechargeProgress.succeeded",
            Unit          = "flag",
        };
        
        public static CanSignalType PrechargeProgress__voltage_progress = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 100,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 8,
            Comment       = "",
            Name          = "voltage_progress",
            QualifiedName = "PrechargeProgress.voltage_progress",
            Unit          = "%",
        };
        
        public static CanSignalType PrechargeProgress__fail_sdc_open = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 19,
            Comment       = "",
            Name          = "fail_sdc_open",
            QualifiedName = "PrechargeProgress.fail_sdc_open",
            Unit          = "flag",
        };
        
        public static CanSignalType PrechargeProgress__fail_air2_open = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 20,
            Comment       = "",
            Name          = "fail_air2_open",
            QualifiedName = "PrechargeProgress.fail_air2_open",
            Unit          = "",
        };
        
        public static CanSignalType PrechargeProgress__fail_communication = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 21,
            Comment       = "",
            Name          = "fail_communication",
            QualifiedName = "PrechargeProgress.fail_communication",
            Unit          = "",
        };
        
        public static CanSignalType AmsStatus__Ams_Accumulator_SoC = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 255,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 8,
            Comment       = "",
            Name          = "Ams_Accumulator_SoC",
            QualifiedName = "AmsStatus.Ams_Accumulator_SoC",
            Unit          = "",
        };
        
        public static CanSignalType AmsStatus__ams_state = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 3,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 0,
            Comment       = "Idle=0,",
            Name          = "ams_state",
            QualifiedName = "AmsStatus.ams_state",
            Unit          = "",
        };
        
        public static CanSignalType AmsStatus__ams_relay_closed = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 16,
            Comment       = "",
            Name          = "ams_relay_closed",
            QualifiedName = "AmsStatus.ams_relay_closed",
            Unit          = "",
        };
        
        public static CanSignalType AmsStatus__imd_relay_closed = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 17,
            Comment       = "",
            Name          = "imd_relay_closed",
            QualifiedName = "AmsStatus.imd_relay_closed",
            Unit          = "",
        };
        
        public static CanSignalType AmsStatus__safestate_relay_closed = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 18,
            Comment       = "",
            Name          = "safestate_relay_closed",
            QualifiedName = "AmsStatus.safestate_relay_closed",
            Unit          = "",
        };
        
        public static CanSignalType AmsStatus__bspd_relay_closed = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 1,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 19,
            Comment       = "",
            Name          = "bspd_relay_closed",
            QualifiedName = "AmsStatus.bspd_relay_closed",
            Unit          = "",
        };
        
        public static CanSignalType AccumulatorMinMaxTemperatures__avg_temperature = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Signed,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 8,
            Comment       = "",
            Name          = "avg_temperature",
            QualifiedName = "AccumulatorMinMaxTemperatures.avg_temperature",
            Unit          = "",
        };
        
        public static CanSignalType AccumulatorMinMaxTemperatures__min_temp = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Float,
            Length        = 16,
            MaxValue      = 655.35,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 0.01,
            StartBit      = 40,
            Comment       = "",
            Name          = "min_temp",
            QualifiedName = "AccumulatorMinMaxTemperatures.min_temp",
            Unit          = "",
        };
        
        public static CanSignalType AccumulatorMinMaxTemperatures__min_temp_thermistor_index = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 255,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 32,
            Comment       = "",
            Name          = "min_temp_thermistor_index",
            QualifiedName = "AccumulatorMinMaxTemperatures.min_temp_thermistor_index",
            Unit          = "",
        };
        
        public static CanSignalType AccumulatorMinMaxTemperatures__max_temp = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Float,
            Length        = 16,
            MaxValue      = 655.35,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 0.01,
            StartBit      = 16,
            Comment       = "",
            Name          = "max_temp",
            QualifiedName = "AccumulatorMinMaxTemperatures.max_temp",
            Unit          = "",
        };
        
        public static CanSignalType AccumulatorMinMaxTemperatures__max_temp_thermistor_index = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 255,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 0,
            Comment       = "",
            Name          = "max_temp_thermistor_index",
            QualifiedName = "AccumulatorMinMaxTemperatures.max_temp_thermistor_index",
            Unit          = "",
        };
        
        public static CanSignalType AccumulatorMinMaxVoltages__avg_voltage = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Float,
            Length        = 8,
            MaxValue      = 4.2,
            MinValue      = 2.9,
            Offset        = 2.9,
            ScaleFactor   = 0.00509804,
            StartBit      = 0,
            Comment       = "",
            Name          = "avg_voltage",
            QualifiedName = "AccumulatorMinMaxVoltages.avg_voltage",
            Unit          = "",
        };
        
        public static CanSignalType AccumulatorMinMaxVoltages__min_voltage = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Float,
            Length        = 16,
            MaxValue      = 65.535,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 0.001,
            StartBit      = 40,
            Comment       = "",
            Name          = "min_voltage",
            QualifiedName = "AccumulatorMinMaxVoltages.min_voltage",
            Unit          = "",
        };
        
        public static CanSignalType AccumulatorMinMaxVoltages__min_voltage_cell_index = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 137,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 32,
            Comment       = "",
            Name          = "min_voltage_cell_index",
            QualifiedName = "AccumulatorMinMaxVoltages.min_voltage_cell_index",
            Unit          = "",
        };
        
        public static CanSignalType AccumulatorMinMaxVoltages__max_voltage = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Float,
            Length        = 16,
            MaxValue      = 65.535,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 0.001,
            StartBit      = 16,
            Comment       = "",
            Name          = "max_voltage",
            QualifiedName = "AccumulatorMinMaxVoltages.max_voltage",
            Unit          = "",
        };
        
        public static CanSignalType AccumulatorMinMaxVoltages__max_voltage_cell_index = new CanSignalType(new List<string>{
            "FrontNode", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 137,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 8,
            Comment       = "",
            Name          = "max_voltage_cell_index",
            QualifiedName = "AccumulatorMinMaxVoltages.max_voltage_cell_index",
            Unit          = "",
        };
        
        public static CanSignalType AmsCellVoltages__cell_offset = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 0,
            Comment       = "",
            Name          = "cell_offset",
            QualifiedName = "AmsCellVoltages.cell_offset",
            Unit          = "",
        };
        
        public static CanSignalType AmsCellVoltages__voltage_1 = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Float,
            Length        = 8,
            MaxValue      = 4.2,
            MinValue      = 2.9,
            Offset        = 2.9,
            ScaleFactor   = 0.00509804,
            StartBit      = 8,
            Comment       = "",
            Name          = "voltage_1",
            QualifiedName = "AmsCellVoltages.voltage_1",
            Unit          = "Volt",
        };
        
        public static CanSignalType AmsCellVoltages__voltage_2 = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Float,
            Length        = 8,
            MaxValue      = 4.2,
            MinValue      = 2.9,
            Offset        = 2.9,
            ScaleFactor   = 0.0050980392157,
            StartBit      = 16,
            Comment       = "",
            Name          = "voltage_2",
            QualifiedName = "AmsCellVoltages.voltage_2",
            Unit          = "Volt",
        };
        
        public static CanSignalType AmsCellVoltages__voltage_3 = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Float,
            Length        = 8,
            MaxValue      = 4.2,
            MinValue      = 2.9,
            Offset        = 2.9,
            ScaleFactor   = 0.0050980392157,
            StartBit      = 24,
            Comment       = "",
            Name          = "voltage_3",
            QualifiedName = "AmsCellVoltages.voltage_3",
            Unit          = "Volt",
        };
        
        public static CanSignalType AmsCellVoltages__voltage_4 = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Float,
            Length        = 8,
            MaxValue      = 4.2,
            MinValue      = 2.9,
            Offset        = 2.9,
            ScaleFactor   = 0.0050980392157,
            StartBit      = 32,
            Comment       = "",
            Name          = "voltage_4",
            QualifiedName = "AmsCellVoltages.voltage_4",
            Unit          = "Volt",
        };
        
        public static CanSignalType AmsCellVoltages__voltage_5 = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Float,
            Length        = 8,
            MaxValue      = 4.2,
            MinValue      = 2.9,
            Offset        = 2.9,
            ScaleFactor   = 0.0050980392157,
            StartBit      = 40,
            Comment       = "",
            Name          = "voltage_5",
            QualifiedName = "AmsCellVoltages.voltage_5",
            Unit          = "Volt",
        };
        
        public static CanSignalType AmsCellVoltages__voltage_6 = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Float,
            Length        = 8,
            MaxValue      = 4.2,
            MinValue      = 2.9,
            Offset        = 2.9,
            ScaleFactor   = 0.0050980392157,
            StartBit      = 48,
            Comment       = "",
            Name          = "voltage_6",
            QualifiedName = "AmsCellVoltages.voltage_6",
            Unit          = "Volt",
        };
        
        public static CanSignalType AmsCellVoltages__voltage_7 = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Float,
            Length        = 8,
            MaxValue      = 4.2,
            MinValue      = 2.9,
            Offset        = 2.9,
            ScaleFactor   = 0.0050980392157,
            StartBit      = 56,
            Comment       = "",
            Name          = "voltage_7",
            QualifiedName = "AmsCellVoltages.voltage_7",
            Unit          = "Volt",
        };
        
        public static CanSignalType AmsThermistorTemperatures__thermistor_offset = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 0,
            Comment       = "",
            Name          = "thermistor_offset",
            QualifiedName = "AmsThermistorTemperatures.thermistor_offset",
            Unit          = "",
        };
        
        public static CanSignalType AmsThermistorTemperatures__temperature_1 = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 107.5,
            MinValue      = -20,
            Offset        = -20,
            ScaleFactor   = 0.5,
            StartBit      = 8,
            Comment       = "",
            Name          = "temperature_1",
            QualifiedName = "AmsThermistorTemperatures.temperature_1",
            Unit          = "Celsius",
        };
        
        public static CanSignalType AmsThermistorTemperatures__temperature_2 = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 107.5,
            MinValue      = -20,
            Offset        = -20,
            ScaleFactor   = 0.5,
            StartBit      = 16,
            Comment       = "",
            Name          = "temperature_2",
            QualifiedName = "AmsThermistorTemperatures.temperature_2",
            Unit          = "Celsius",
        };
        
        public static CanSignalType AmsThermistorTemperatures__temperature_3 = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 107.5,
            MinValue      = -20,
            Offset        = -20,
            ScaleFactor   = 0.5,
            StartBit      = 24,
            Comment       = "",
            Name          = "temperature_3",
            QualifiedName = "AmsThermistorTemperatures.temperature_3",
            Unit          = "Celsius",
        };
        
        public static CanSignalType AmsThermistorTemperatures__temperature_4 = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 107.5,
            MinValue      = -20,
            Offset        = -20,
            ScaleFactor   = 0.5,
            StartBit      = 32,
            Comment       = "",
            Name          = "temperature_4",
            QualifiedName = "AmsThermistorTemperatures.temperature_4",
            Unit          = "Celsius",
        };
        
        public static CanSignalType AmsThermistorTemperatures__temperature_5 = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 107.5,
            MinValue      = -20,
            Offset        = -20,
            ScaleFactor   = 0.5,
            StartBit      = 40,
            Comment       = "",
            Name          = "temperature_5",
            QualifiedName = "AmsThermistorTemperatures.temperature_5",
            Unit          = "Celsius",
        };
        
        public static CanSignalType AmsThermistorTemperatures__temperature_6 = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 107.5,
            MinValue      = -20,
            Offset        = -20,
            ScaleFactor   = 0.5,
            StartBit      = 48,
            Comment       = "",
            Name          = "temperature_6",
            QualifiedName = "AmsThermistorTemperatures.temperature_6",
            Unit          = "Celsius",
        };
        
        public static CanSignalType AmsThermistorTemperatures__temperature_7 = new CanSignalType(new List<string>{
            "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 107.5,
            MinValue      = -20,
            Offset        = -20,
            ScaleFactor   = 0.5,
            StartBit      = 56,
            Comment       = "",
            Name          = "temperature_7",
            QualifiedName = "AmsThermistorTemperatures.temperature_7",
            Unit          = "Celsius",
        };
        
        public static CanSignalType IVT_Msg_Result_U3__IVT_ResultState_And_MsgCount_U3 = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Signed,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 8,
            Comment       = "",
            Name          = "IVT_ResultState_And_MsgCount_U3",
            QualifiedName = "IVT_Msg_Result_U3.IVT_ResultState_And_MsgCount_U3",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_U3__IVT_Result_U3 = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Signed,
            Length        = 32,
            MaxValue      = 32000,
            MinValue      = -32000,
            Offset        = 0,
            ScaleFactor   = 0.001,
            StartBit      = 16,
            Comment       = "",
            Name          = "IVT_Result_U3",
            QualifiedName = "IVT_Msg_Result_U3.IVT_Result_U3",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_U3__IVT_MuxID_U3 = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 0,
            Comment       = "",
            Name          = "IVT_MuxID_U3",
            QualifiedName = "IVT_Msg_Result_U3.IVT_MuxID_U3",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_U2__IVT_ResultState_And_MsgCount_U2 = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Signed,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 8,
            Comment       = "",
            Name          = "IVT_ResultState_And_MsgCount_U2",
            QualifiedName = "IVT_Msg_Result_U2.IVT_ResultState_And_MsgCount_U2",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_U2__IVT_Result_U2 = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Signed,
            Length        = 32,
            MaxValue      = 32000,
            MinValue      = -32000,
            Offset        = 0,
            ScaleFactor   = 0.001,
            StartBit      = 16,
            Comment       = "",
            Name          = "IVT_Result_U2",
            QualifiedName = "IVT_Msg_Result_U2.IVT_Result_U2",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_U2__IVT_MuxID_U2 = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 0,
            Comment       = "",
            Name          = "IVT_MuxID_U2",
            QualifiedName = "IVT_Msg_Result_U2.IVT_MuxID_U2",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_U1__IVT_ResultState_And_MsgCount_U1 = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Signed,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 8,
            Comment       = "",
            Name          = "IVT_ResultState_And_MsgCount_U1",
            QualifiedName = "IVT_Msg_Result_U1.IVT_ResultState_And_MsgCount_U1",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_U1__IVT_Result_U1 = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Signed,
            Length        = 32,
            MaxValue      = 32000,
            MinValue      = -32000,
            Offset        = 0,
            ScaleFactor   = 0.001,
            StartBit      = 16,
            Comment       = "",
            Name          = "IVT_Result_U1",
            QualifiedName = "IVT_Msg_Result_U1.IVT_Result_U1",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_U1__IVT_MuxID_U1 = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 0,
            Comment       = "",
            Name          = "IVT_MuxID_U1",
            QualifiedName = "IVT_Msg_Result_U1.IVT_MuxID_U1",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_T__IVT_ResultState_And_MsgCount_T = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Signed,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 8,
            Comment       = "",
            Name          = "IVT_ResultState_And_MsgCount_T",
            QualifiedName = "IVT_Msg_Result_T.IVT_ResultState_And_MsgCount_T",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_T__IVT_Result_T = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Signed,
            Length        = 32,
            MaxValue      = 214748364.7,
            MinValue      = -214748364.8,
            Offset        = 0,
            ScaleFactor   = 0.1,
            StartBit      = 16,
            Comment       = "",
            Name          = "IVT_Result_T",
            QualifiedName = "IVT_Msg_Result_T.IVT_Result_T",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_T__IVT_MuxID_T = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 0,
            Comment       = "",
            Name          = "IVT_MuxID_T",
            QualifiedName = "IVT_Msg_Result_T.IVT_MuxID_T",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_I__IVT_ResultState_And_MsgCount_I = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Signed,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 8,
            Comment       = "",
            Name          = "IVT_ResultState_And_MsgCount_I",
            QualifiedName = "IVT_Msg_Result_I.IVT_ResultState_And_MsgCount_I",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_I__IVT_Result_I = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Signed,
            Length        = 32,
            MaxValue      = 32000,
            MinValue      = -32000,
            Offset        = 0,
            ScaleFactor   = 0.001,
            StartBit      = 16,
            Comment       = "",
            Name          = "IVT_Result_I",
            QualifiedName = "IVT_Msg_Result_I.IVT_Result_I",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_I__IVT_MuxID_I = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 0,
            Comment       = "",
            Name          = "IVT_MuxID_I",
            QualifiedName = "IVT_Msg_Result_I.IVT_MuxID_I",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_As__IVT_ResultState_And_MsgCount_As = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Signed,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 8,
            Comment       = "",
            Name          = "IVT_ResultState_And_MsgCount_As",
            QualifiedName = "IVT_Msg_Result_As.IVT_ResultState_And_MsgCount_As",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_As__IVT_Result_As = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Signed,
            Length        = 32,
            MaxValue      = 2147483.647,
            MinValue      = -2147483.648,
            Offset        = 0,
            ScaleFactor   = 0.001,
            StartBit      = 16,
            Comment       = "",
            Name          = "IVT_Result_As",
            QualifiedName = "IVT_Msg_Result_As.IVT_Result_As",
            Unit          = "",
        };
        
        public static CanSignalType IVT_Msg_Result_As__IVT_MuxID_As = new CanSignalType(new List<string>{
            "Ams", "AmsClient", 
        })
        {
            Encoding      = SignalEncoding.Intel,
            Type          = SignalType.Unsigned,
            Length        = 8,
            MaxValue      = 0,
            MinValue      = 0,
            Offset        = 0,
            ScaleFactor   = 1,
            StartBit      = 0,
            Comment       = "",
            Name          = "IVT_MuxID_As",
            QualifiedName = "IVT_Msg_Result_As.IVT_MuxID_As",
            Unit          = "",
        };
        
    }

}
namespace AmsClient.CanTypes.Messages
{

    
    public class AccumulatorStackErrorsMessage : CanMessageExtended<AccumulatorStackErrorsMessage>
    {
        public AccumulatorStackErrorsMessage()
        {
            MessageType = CanMessageTypes.AccumulatorStackErrors;
            Id = 161;
        }
        public static readonly CanSignalType stack6_errors = CanSignalTypes.AccumulatorStackErrors__stack6_errors;
        public sbyte Getstack6_errors()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(stack6_errors);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setstack6_errors(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(stack6_errors, (UInt64)value);
        }
        public static readonly CanSignalType stack5_errors = CanSignalTypes.AccumulatorStackErrors__stack5_errors;
        public sbyte Getstack5_errors()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(stack5_errors);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setstack5_errors(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(stack5_errors, (UInt64)value);
        }
        public static readonly CanSignalType stack4_errors = CanSignalTypes.AccumulatorStackErrors__stack4_errors;
        public sbyte Getstack4_errors()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(stack4_errors);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setstack4_errors(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(stack4_errors, (UInt64)value);
        }
        public static readonly CanSignalType stack3_errors = CanSignalTypes.AccumulatorStackErrors__stack3_errors;
        public sbyte Getstack3_errors()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(stack3_errors);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setstack3_errors(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(stack3_errors, (UInt64)value);
        }
        public static readonly CanSignalType stack2_errors = CanSignalTypes.AccumulatorStackErrors__stack2_errors;
        public sbyte Getstack2_errors()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(stack2_errors);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setstack2_errors(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(stack2_errors, (UInt64)value);
        }
        public static readonly CanSignalType stack1_errors = CanSignalTypes.AccumulatorStackErrors__stack1_errors;
        public sbyte Getstack1_errors()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(stack1_errors);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setstack1_errors(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(stack1_errors, (UInt64)value);
        }
    }
    
    
    public class IVT_Msg_Result_WhMessage : CanMessageExtended<IVT_Msg_Result_WhMessage>
    {
        public IVT_Msg_Result_WhMessage()
        {
            MessageType = CanMessageTypes.IVT_Msg_Result_Wh;
            Id = 1320;
        }
        public static readonly CanSignalType IVT_ResultState_And_MsgCount_Wh = CanSignalTypes.IVT_Msg_Result_Wh__IVT_ResultState_And_MsgCount_Wh;
        public byte GetIVT_ResultState_And_MsgCount_Wh()
        {
            // Get bits from raw data storage and cast
            byte tempValue = (byte)ExtractBits(IVT_ResultState_And_MsgCount_Wh);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_ResultState_And_MsgCount_Wh(byte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_ResultState_And_MsgCount_Wh, (UInt64)value);
        }
        public static readonly CanSignalType IVT_Result_Wh = CanSignalTypes.IVT_Msg_Result_Wh__IVT_Result_Wh;
        public Int32 GetIVT_Result_Wh()
        {
            // Get bits from raw data storage and cast
            Int32 tempValue = (Int32)ExtractBits(IVT_Result_Wh);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_Result_Wh(Int32 value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_Result_Wh, (UInt64)value);
        }
        public static readonly CanSignalType IVT_MuxID_Wh = CanSignalTypes.IVT_Msg_Result_Wh__IVT_MuxID_Wh;
        public sbyte GetIVT_MuxID_Wh()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(IVT_MuxID_Wh);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_MuxID_Wh(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_MuxID_Wh, (UInt64)value);
        }
    }
    
    
    public class IVT_Msg_Result_WMessage : CanMessageExtended<IVT_Msg_Result_WMessage>
    {
        public IVT_Msg_Result_WMessage()
        {
            MessageType = CanMessageTypes.IVT_Msg_Result_W;
            Id = 1318;
        }
        public static readonly CanSignalType IVT_ResultState_And_MsgCount_W = CanSignalTypes.IVT_Msg_Result_W__IVT_ResultState_And_MsgCount_W;
        public byte GetIVT_ResultState_And_MsgCount_W()
        {
            // Get bits from raw data storage and cast
            byte tempValue = (byte)ExtractBits(IVT_ResultState_And_MsgCount_W);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_ResultState_And_MsgCount_W(byte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_ResultState_And_MsgCount_W, (UInt64)value);
        }
        public static readonly CanSignalType IVT_Result_W = CanSignalTypes.IVT_Msg_Result_W__IVT_Result_W;
        public Int32 GetIVT_Result_W()
        {
            // Get bits from raw data storage and cast
            Int32 tempValue = (Int32)ExtractBits(IVT_Result_W);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_Result_W(Int32 value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_Result_W, (UInt64)value);
        }
        public static readonly CanSignalType IVT_MuxID_W = CanSignalTypes.IVT_Msg_Result_W__IVT_MuxID_W;
        public sbyte GetIVT_MuxID_W()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(IVT_MuxID_W);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_MuxID_W(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_MuxID_W, (UInt64)value);
        }
    }
    
    
    public class AmsClientStatusMessage : CanMessageExtended<AmsClientStatusMessage>
    {
        public AmsClientStatusMessage()
        {
            MessageType = CanMessageTypes.AmsClientStatus;
            Id = 241;
        }
        public static readonly CanSignalType AmsClient_Trigger_Ams = CanSignalTypes.AmsClientStatus__AmsClient_Trigger_Ams;
        public sbyte GetAmsClient_Trigger_Ams()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(AmsClient_Trigger_Ams);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetAmsClient_Trigger_Ams(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(AmsClient_Trigger_Ams, (UInt64)value);
        }
        public static readonly CanSignalType AmsClient_Start_TS = CanSignalTypes.AmsClientStatus__AmsClient_Start_TS;
        public sbyte GetAmsClient_Start_TS()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(AmsClient_Start_TS);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetAmsClient_Start_TS(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(AmsClient_Start_TS, (UInt64)value);
        }
    }
    
    
    public class PrechargeProgressMessage : CanMessageExtended<PrechargeProgressMessage>
    {
        public PrechargeProgressMessage()
        {
            MessageType = CanMessageTypes.PrechargeProgress;
            Id = 168;
        }
        public static readonly CanSignalType time_progress = CanSignalTypes.PrechargeProgress__time_progress;
        public sbyte Gettime_progress()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(time_progress);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Settime_progress(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(time_progress, (UInt64)value);
        }
        public static readonly CanSignalType fail_air1_open = CanSignalTypes.PrechargeProgress__fail_air1_open;
        public sbyte Getfail_air1_open()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(fail_air1_open);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setfail_air1_open(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(fail_air1_open, (UInt64)value);
        }
        public static readonly CanSignalType fail_timeout = CanSignalTypes.PrechargeProgress__fail_timeout;
        public sbyte Getfail_timeout()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(fail_timeout);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setfail_timeout(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(fail_timeout, (UInt64)value);
        }
        public static readonly CanSignalType succeeded = CanSignalTypes.PrechargeProgress__succeeded;
        public sbyte Getsucceeded()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(succeeded);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setsucceeded(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(succeeded, (UInt64)value);
        }
        public static readonly CanSignalType voltage_progress = CanSignalTypes.PrechargeProgress__voltage_progress;
        public sbyte Getvoltage_progress()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(voltage_progress);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setvoltage_progress(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(voltage_progress, (UInt64)value);
        }
        public static readonly CanSignalType fail_sdc_open = CanSignalTypes.PrechargeProgress__fail_sdc_open;
        public sbyte Getfail_sdc_open()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(fail_sdc_open);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setfail_sdc_open(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(fail_sdc_open, (UInt64)value);
        }
        public static readonly CanSignalType fail_air2_open = CanSignalTypes.PrechargeProgress__fail_air2_open;
        public sbyte Getfail_air2_open()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(fail_air2_open);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setfail_air2_open(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(fail_air2_open, (UInt64)value);
        }
        public static readonly CanSignalType fail_communication = CanSignalTypes.PrechargeProgress__fail_communication;
        public sbyte Getfail_communication()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(fail_communication);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setfail_communication(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(fail_communication, (UInt64)value);
        }
    }
    
    
    public class AmsStatusMessage : CanMessageExtended<AmsStatusMessage>
    {
        public AmsStatusMessage()
        {
            MessageType = CanMessageTypes.AmsStatus;
            Id = 175;
        }
        public static readonly CanSignalType Ams_Accumulator_SoC = CanSignalTypes.AmsStatus__Ams_Accumulator_SoC;
        public sbyte GetAms_Accumulator_SoC()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(Ams_Accumulator_SoC);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetAms_Accumulator_SoC(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(Ams_Accumulator_SoC, (UInt64)value);
        }
        public static readonly CanSignalType ams_state = CanSignalTypes.AmsStatus__ams_state;
        public sbyte Getams_state()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(ams_state);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setams_state(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(ams_state, (UInt64)value);
        }
        public static readonly CanSignalType ams_relay_closed = CanSignalTypes.AmsStatus__ams_relay_closed;
        public sbyte Getams_relay_closed()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(ams_relay_closed);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setams_relay_closed(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(ams_relay_closed, (UInt64)value);
        }
        public static readonly CanSignalType imd_relay_closed = CanSignalTypes.AmsStatus__imd_relay_closed;
        public sbyte Getimd_relay_closed()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(imd_relay_closed);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setimd_relay_closed(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(imd_relay_closed, (UInt64)value);
        }
        public static readonly CanSignalType safestate_relay_closed = CanSignalTypes.AmsStatus__safestate_relay_closed;
        public sbyte Getsafestate_relay_closed()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(safestate_relay_closed);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setsafestate_relay_closed(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(safestate_relay_closed, (UInt64)value);
        }
        public static readonly CanSignalType bspd_relay_closed = CanSignalTypes.AmsStatus__bspd_relay_closed;
        public sbyte Getbspd_relay_closed()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(bspd_relay_closed);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setbspd_relay_closed(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(bspd_relay_closed, (UInt64)value);
        }
    }
    
    
    public class AccumulatorMinMaxTemperaturesMessage : CanMessageExtended<AccumulatorMinMaxTemperaturesMessage>
    {
        public AccumulatorMinMaxTemperaturesMessage()
        {
            MessageType = CanMessageTypes.AccumulatorMinMaxTemperatures;
            Id = 167;
        }
        public static readonly CanSignalType avg_temperature = CanSignalTypes.AccumulatorMinMaxTemperatures__avg_temperature;
        public byte Getavg_temperature()
        {
            // Get bits from raw data storage and cast
            byte tempValue = (byte)ExtractBits(avg_temperature);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setavg_temperature(byte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(avg_temperature, (UInt64)value);
        }
        public static readonly CanSignalType min_temp = CanSignalTypes.AccumulatorMinMaxTemperatures__min_temp;
        public float Getmin_temp()
        {
            // Get bits from raw data storage and cast
            float tempValue = (float)ExtractBits(min_temp);
            // Apply inverse transform to restore actual value
            tempValue  /= 100f;
            tempValue  -= 0f;
            return tempValue;
        }
        
        public void Setmin_temp(float value)
        {
            // Scale and offset value according to signal specification
            value += 0f;
            value *= 100f;
            // Cats to integer and prepare for sending
            this.InsertBits(min_temp, (UInt64)value);
        }
        public static readonly CanSignalType min_temp_thermistor_index = CanSignalTypes.AccumulatorMinMaxTemperatures__min_temp_thermistor_index;
        public sbyte Getmin_temp_thermistor_index()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(min_temp_thermistor_index);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setmin_temp_thermistor_index(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(min_temp_thermistor_index, (UInt64)value);
        }
        public static readonly CanSignalType max_temp = CanSignalTypes.AccumulatorMinMaxTemperatures__max_temp;
        public float Getmax_temp()
        {
            // Get bits from raw data storage and cast
            float tempValue = (float)ExtractBits(max_temp);
            // Apply inverse transform to restore actual value
            tempValue  /= 100f;
            tempValue  -= 0f;
            return tempValue;
        }
        
        public void Setmax_temp(float value)
        {
            // Scale and offset value according to signal specification
            value += 0f;
            value *= 100f;
            // Cats to integer and prepare for sending
            this.InsertBits(max_temp, (UInt64)value);
        }
        public static readonly CanSignalType max_temp_thermistor_index = CanSignalTypes.AccumulatorMinMaxTemperatures__max_temp_thermistor_index;
        public sbyte Getmax_temp_thermistor_index()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(max_temp_thermistor_index);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setmax_temp_thermistor_index(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(max_temp_thermistor_index, (UInt64)value);
        }
    }
    
    
    public class AccumulatorMinMaxVoltagesMessage : CanMessageExtended<AccumulatorMinMaxVoltagesMessage>
    {
        public AccumulatorMinMaxVoltagesMessage()
        {
            MessageType = CanMessageTypes.AccumulatorMinMaxVoltages;
            Id = 166;
        }
        public static readonly CanSignalType avg_voltage = CanSignalTypes.AccumulatorMinMaxVoltages__avg_voltage;
        public float Getavg_voltage()
        {
            // Get bits from raw data storage and cast
            float tempValue = (float)ExtractBits(avg_voltage);
            // Apply inverse transform to restore actual value
            tempValue  /= 196.153815976336f;
            tempValue  -= -2.9f;
            return tempValue;
        }
        
        public void Setavg_voltage(float value)
        {
            // Scale and offset value according to signal specification
            value += -2.9f;
            value *= 196.153815976336f;
            // Cats to integer and prepare for sending
            this.InsertBits(avg_voltage, (UInt64)value);
        }
        public static readonly CanSignalType min_voltage = CanSignalTypes.AccumulatorMinMaxVoltages__min_voltage;
        public float Getmin_voltage()
        {
            // Get bits from raw data storage and cast
            float tempValue = (float)ExtractBits(min_voltage);
            // Apply inverse transform to restore actual value
            tempValue  /= 1000f;
            tempValue  -= 0f;
            return tempValue;
        }
        
        public void Setmin_voltage(float value)
        {
            // Scale and offset value according to signal specification
            value += 0f;
            value *= 1000f;
            // Cats to integer and prepare for sending
            this.InsertBits(min_voltage, (UInt64)value);
        }
        public static readonly CanSignalType min_voltage_cell_index = CanSignalTypes.AccumulatorMinMaxVoltages__min_voltage_cell_index;
        public sbyte Getmin_voltage_cell_index()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(min_voltage_cell_index);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setmin_voltage_cell_index(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(min_voltage_cell_index, (UInt64)value);
        }
        public static readonly CanSignalType max_voltage = CanSignalTypes.AccumulatorMinMaxVoltages__max_voltage;
        public float Getmax_voltage()
        {
            // Get bits from raw data storage and cast
            float tempValue = (float)ExtractBits(max_voltage);
            // Apply inverse transform to restore actual value
            tempValue  /= 1000f;
            tempValue  -= 0f;
            return tempValue;
        }
        
        public void Setmax_voltage(float value)
        {
            // Scale and offset value according to signal specification
            value += 0f;
            value *= 1000f;
            // Cats to integer and prepare for sending
            this.InsertBits(max_voltage, (UInt64)value);
        }
        public static readonly CanSignalType max_voltage_cell_index = CanSignalTypes.AccumulatorMinMaxVoltages__max_voltage_cell_index;
        public sbyte Getmax_voltage_cell_index()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(max_voltage_cell_index);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setmax_voltage_cell_index(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(max_voltage_cell_index, (UInt64)value);
        }
    }
    
    
    public class AmsCellVoltagesMessage : CanMessageExtended<AmsCellVoltagesMessage>
    {
        public AmsCellVoltagesMessage()
        {
            MessageType = CanMessageTypes.AmsCellVoltages;
            Id = 163;
        }
        public static readonly CanSignalType cell_offset = CanSignalTypes.AmsCellVoltages__cell_offset;
        public sbyte Getcell_offset()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(cell_offset);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setcell_offset(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(cell_offset, (UInt64)value);
        }
        public static readonly CanSignalType voltage_1 = CanSignalTypes.AmsCellVoltages__voltage_1;
        public float Getvoltage_1()
        {
            // Get bits from raw data storage and cast
            float tempValue = (float)ExtractBits(voltage_1);
            // Apply inverse transform to restore actual value
            tempValue  /= 196.153815976336f;
            tempValue  -= -2.9f;
            return tempValue;
        }
        
        public void Setvoltage_1(float value)
        {
            // Scale and offset value according to signal specification
            value += -2.9f;
            value *= 196.153815976336f;
            // Cats to integer and prepare for sending
            this.InsertBits(voltage_1, (UInt64)value);
        }
        public static readonly CanSignalType voltage_2 = CanSignalTypes.AmsCellVoltages__voltage_2;
        public float Getvoltage_2()
        {
            // Get bits from raw data storage and cast
            float tempValue = (float)ExtractBits(voltage_2);
            // Apply inverse transform to restore actual value
            tempValue  /= 196.153846153318f;
            tempValue  -= -2.9f;
            return tempValue;
        }
        
        public void Setvoltage_2(float value)
        {
            // Scale and offset value according to signal specification
            value += -2.9f;
            value *= 196.153846153318f;
            // Cats to integer and prepare for sending
            this.InsertBits(voltage_2, (UInt64)value);
        }
        public static readonly CanSignalType voltage_3 = CanSignalTypes.AmsCellVoltages__voltage_3;
        public float Getvoltage_3()
        {
            // Get bits from raw data storage and cast
            float tempValue = (float)ExtractBits(voltage_3);
            // Apply inverse transform to restore actual value
            tempValue  /= 196.153846153318f;
            tempValue  -= -2.9f;
            return tempValue;
        }
        
        public void Setvoltage_3(float value)
        {
            // Scale and offset value according to signal specification
            value += -2.9f;
            value *= 196.153846153318f;
            // Cats to integer and prepare for sending
            this.InsertBits(voltage_3, (UInt64)value);
        }
        public static readonly CanSignalType voltage_4 = CanSignalTypes.AmsCellVoltages__voltage_4;
        public float Getvoltage_4()
        {
            // Get bits from raw data storage and cast
            float tempValue = (float)ExtractBits(voltage_4);
            // Apply inverse transform to restore actual value
            tempValue  /= 196.153846153318f;
            tempValue  -= -2.9f;
            return tempValue;
        }
        
        public void Setvoltage_4(float value)
        {
            // Scale and offset value according to signal specification
            value += -2.9f;
            value *= 196.153846153318f;
            // Cats to integer and prepare for sending
            this.InsertBits(voltage_4, (UInt64)value);
        }
        public static readonly CanSignalType voltage_5 = CanSignalTypes.AmsCellVoltages__voltage_5;
        public float Getvoltage_5()
        {
            // Get bits from raw data storage and cast
            float tempValue = (float)ExtractBits(voltage_5);
            // Apply inverse transform to restore actual value
            tempValue  /= 196.153846153318f;
            tempValue  -= -2.9f;
            return tempValue;
        }
        
        public void Setvoltage_5(float value)
        {
            // Scale and offset value according to signal specification
            value += -2.9f;
            value *= 196.153846153318f;
            // Cats to integer and prepare for sending
            this.InsertBits(voltage_5, (UInt64)value);
        }
        public static readonly CanSignalType voltage_6 = CanSignalTypes.AmsCellVoltages__voltage_6;
        public float Getvoltage_6()
        {
            // Get bits from raw data storage and cast
            float tempValue = (float)ExtractBits(voltage_6);
            // Apply inverse transform to restore actual value
            tempValue  /= 196.153846153318f;
            tempValue  -= -2.9f;
            return tempValue;
        }
        
        public void Setvoltage_6(float value)
        {
            // Scale and offset value according to signal specification
            value += -2.9f;
            value *= 196.153846153318f;
            // Cats to integer and prepare for sending
            this.InsertBits(voltage_6, (UInt64)value);
        }
        public static readonly CanSignalType voltage_7 = CanSignalTypes.AmsCellVoltages__voltage_7;
        public float Getvoltage_7()
        {
            // Get bits from raw data storage and cast
            float tempValue = (float)ExtractBits(voltage_7);
            // Apply inverse transform to restore actual value
            tempValue  /= 196.153846153318f;
            tempValue  -= -2.9f;
            return tempValue;
        }
        
        public void Setvoltage_7(float value)
        {
            // Scale and offset value according to signal specification
            value += -2.9f;
            value *= 196.153846153318f;
            // Cats to integer and prepare for sending
            this.InsertBits(voltage_7, (UInt64)value);
        }
    }
    
    
    public class AmsThermistorTemperaturesMessage : CanMessageExtended<AmsThermistorTemperaturesMessage>
    {
        public AmsThermistorTemperaturesMessage()
        {
            MessageType = CanMessageTypes.AmsThermistorTemperatures;
            Id = 162;
        }
        public static readonly CanSignalType thermistor_offset = CanSignalTypes.AmsThermistorTemperatures__thermistor_offset;
        public sbyte Getthermistor_offset()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(thermistor_offset);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void Setthermistor_offset(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(thermistor_offset, (UInt64)value);
        }
        public static readonly CanSignalType temperature_1 = CanSignalTypes.AmsThermistorTemperatures__temperature_1;
        public sbyte Gettemperature_1()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(temperature_1);
            // Apply inverse transform to restore actual value
            tempValue  /= 2;
            tempValue  -= 20;
            return tempValue;
        }
        
        public void Settemperature_1(sbyte value)
        {
            // Scale and offset value according to signal specification
            value += 20;
            value *= 2;
            // Cats to integer and prepare for sending
            this.InsertBits(temperature_1, (UInt64)value);
        }
        public static readonly CanSignalType temperature_2 = CanSignalTypes.AmsThermistorTemperatures__temperature_2;
        public sbyte Gettemperature_2()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(temperature_2);
            // Apply inverse transform to restore actual value
            tempValue  /= 2;
            tempValue  -= 20;
            return tempValue;
        }
        
        public void Settemperature_2(sbyte value)
        {
            // Scale and offset value according to signal specification
            value += 20;
            value *= 2;
            // Cats to integer and prepare for sending
            this.InsertBits(temperature_2, (UInt64)value);
        }
        public static readonly CanSignalType temperature_3 = CanSignalTypes.AmsThermistorTemperatures__temperature_3;
        public sbyte Gettemperature_3()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(temperature_3);
            // Apply inverse transform to restore actual value
            tempValue  /= 2;
            tempValue  -= 20;
            return tempValue;
        }
        
        public void Settemperature_3(sbyte value)
        {
            // Scale and offset value according to signal specification
            value += 20;
            value *= 2;
            // Cats to integer and prepare for sending
            this.InsertBits(temperature_3, (UInt64)value);
        }
        public static readonly CanSignalType temperature_4 = CanSignalTypes.AmsThermistorTemperatures__temperature_4;
        public sbyte Gettemperature_4()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(temperature_4);
            // Apply inverse transform to restore actual value
            tempValue  /= 2;
            tempValue  -= 20;
            return tempValue;
        }
        
        public void Settemperature_4(sbyte value)
        {
            // Scale and offset value according to signal specification
            value += 20;
            value *= 2;
            // Cats to integer and prepare for sending
            this.InsertBits(temperature_4, (UInt64)value);
        }
        public static readonly CanSignalType temperature_5 = CanSignalTypes.AmsThermistorTemperatures__temperature_5;
        public sbyte Gettemperature_5()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(temperature_5);
            // Apply inverse transform to restore actual value
            tempValue  /= 2;
            tempValue  -= 20;
            return tempValue;
        }
        
        public void Settemperature_5(sbyte value)
        {
            // Scale and offset value according to signal specification
            value += 20;
            value *= 2;
            // Cats to integer and prepare for sending
            this.InsertBits(temperature_5, (UInt64)value);
        }
        public static readonly CanSignalType temperature_6 = CanSignalTypes.AmsThermistorTemperatures__temperature_6;
        public sbyte Gettemperature_6()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(temperature_6);
            // Apply inverse transform to restore actual value
            tempValue  /= 2;
            tempValue  -= 20;
            return tempValue;
        }
        
        public void Settemperature_6(sbyte value)
        {
            // Scale and offset value according to signal specification
            value += 20;
            value *= 2;
            // Cats to integer and prepare for sending
            this.InsertBits(temperature_6, (UInt64)value);
        }
        public static readonly CanSignalType temperature_7 = CanSignalTypes.AmsThermistorTemperatures__temperature_7;
        public sbyte Gettemperature_7()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(temperature_7);
            // Apply inverse transform to restore actual value
            tempValue  /= 2;
            tempValue  -= 20;
            return tempValue;
        }
        
        public void Settemperature_7(sbyte value)
        {
            // Scale and offset value according to signal specification
            value += 20;
            value *= 2;
            // Cats to integer and prepare for sending
            this.InsertBits(temperature_7, (UInt64)value);
        }
    }
    
    
    public class IVT_Msg_Result_U3Message : CanMessageExtended<IVT_Msg_Result_U3Message>
    {
        public IVT_Msg_Result_U3Message()
        {
            MessageType = CanMessageTypes.IVT_Msg_Result_U3;
            Id = 1316;
        }
        public static readonly CanSignalType IVT_ResultState_And_MsgCount_U3 = CanSignalTypes.IVT_Msg_Result_U3__IVT_ResultState_And_MsgCount_U3;
        public byte GetIVT_ResultState_And_MsgCount_U3()
        {
            // Get bits from raw data storage and cast
            byte tempValue = (byte)ExtractBits(IVT_ResultState_And_MsgCount_U3);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_ResultState_And_MsgCount_U3(byte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_ResultState_And_MsgCount_U3, (UInt64)value);
        }
        public static readonly CanSignalType IVT_Result_U3 = CanSignalTypes.IVT_Msg_Result_U3__IVT_Result_U3;
        public Int32 GetIVT_Result_U3()
        {
            // Get bits from raw data storage and cast
            Int32 tempValue = (Int32)ExtractBits(IVT_Result_U3);
            // Apply inverse transform to restore actual value
            tempValue  /= 1000;
            tempValue  -= 0;
            return tempValue;
        }
        
        public void SetIVT_Result_U3(Int32 value)
        {
            // Scale and offset value according to signal specification
            value += 0;
            value *= 1000;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_Result_U3, (UInt64)value);
        }
        public static readonly CanSignalType IVT_MuxID_U3 = CanSignalTypes.IVT_Msg_Result_U3__IVT_MuxID_U3;
        public sbyte GetIVT_MuxID_U3()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(IVT_MuxID_U3);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_MuxID_U3(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_MuxID_U3, (UInt64)value);
        }
    }
    
    
    public class IVT_Msg_Result_U2Message : CanMessageExtended<IVT_Msg_Result_U2Message>
    {
        public IVT_Msg_Result_U2Message()
        {
            MessageType = CanMessageTypes.IVT_Msg_Result_U2;
            Id = 1315;
        }
        public static readonly CanSignalType IVT_ResultState_And_MsgCount_U2 = CanSignalTypes.IVT_Msg_Result_U2__IVT_ResultState_And_MsgCount_U2;
        public byte GetIVT_ResultState_And_MsgCount_U2()
        {
            // Get bits from raw data storage and cast
            byte tempValue = (byte)ExtractBits(IVT_ResultState_And_MsgCount_U2);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_ResultState_And_MsgCount_U2(byte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_ResultState_And_MsgCount_U2, (UInt64)value);
        }
        public static readonly CanSignalType IVT_Result_U2 = CanSignalTypes.IVT_Msg_Result_U2__IVT_Result_U2;
        public Int32 GetIVT_Result_U2()
        {
            // Get bits from raw data storage and cast
            Int32 tempValue = (Int32)ExtractBits(IVT_Result_U2);
            // Apply inverse transform to restore actual value
            tempValue  /= 1000;
            tempValue  -= 0;
            return tempValue;
        }
        
        public void SetIVT_Result_U2(Int32 value)
        {
            // Scale and offset value according to signal specification
            value += 0;
            value *= 1000;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_Result_U2, (UInt64)value);
        }
        public static readonly CanSignalType IVT_MuxID_U2 = CanSignalTypes.IVT_Msg_Result_U2__IVT_MuxID_U2;
        public sbyte GetIVT_MuxID_U2()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(IVT_MuxID_U2);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_MuxID_U2(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_MuxID_U2, (UInt64)value);
        }
    }
    
    
    public class IVT_Msg_Result_U1Message : CanMessageExtended<IVT_Msg_Result_U1Message>
    {
        public IVT_Msg_Result_U1Message()
        {
            MessageType = CanMessageTypes.IVT_Msg_Result_U1;
            Id = 1314;
        }
        public static readonly CanSignalType IVT_ResultState_And_MsgCount_U1 = CanSignalTypes.IVT_Msg_Result_U1__IVT_ResultState_And_MsgCount_U1;
        public byte GetIVT_ResultState_And_MsgCount_U1()
        {
            // Get bits from raw data storage and cast
            byte tempValue = (byte)ExtractBits(IVT_ResultState_And_MsgCount_U1);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_ResultState_And_MsgCount_U1(byte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_ResultState_And_MsgCount_U1, (UInt64)value);
        }
        public static readonly CanSignalType IVT_Result_U1 = CanSignalTypes.IVT_Msg_Result_U1__IVT_Result_U1;
        public Int32 GetIVT_Result_U1()
        {
            // Get bits from raw data storage and cast
            Int32 tempValue = (Int32)ExtractBits(IVT_Result_U1);
            // Apply inverse transform to restore actual value
            tempValue  /= 1000;
            tempValue  -= 0;
            return tempValue;
        }
        
        public void SetIVT_Result_U1(Int32 value)
        {
            // Scale and offset value according to signal specification
            value += 0;
            value *= 1000;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_Result_U1, (UInt64)value);
        }
        public static readonly CanSignalType IVT_MuxID_U1 = CanSignalTypes.IVT_Msg_Result_U1__IVT_MuxID_U1;
        public sbyte GetIVT_MuxID_U1()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(IVT_MuxID_U1);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_MuxID_U1(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_MuxID_U1, (UInt64)value);
        }
    }
    
    
    public class IVT_Msg_Result_TMessage : CanMessageExtended<IVT_Msg_Result_TMessage>
    {
        public IVT_Msg_Result_TMessage()
        {
            MessageType = CanMessageTypes.IVT_Msg_Result_T;
            Id = 1317;
        }
        public static readonly CanSignalType IVT_ResultState_And_MsgCount_T = CanSignalTypes.IVT_Msg_Result_T__IVT_ResultState_And_MsgCount_T;
        public byte GetIVT_ResultState_And_MsgCount_T()
        {
            // Get bits from raw data storage and cast
            byte tempValue = (byte)ExtractBits(IVT_ResultState_And_MsgCount_T);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_ResultState_And_MsgCount_T(byte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_ResultState_And_MsgCount_T, (UInt64)value);
        }
        public static readonly CanSignalType IVT_Result_T = CanSignalTypes.IVT_Msg_Result_T__IVT_Result_T;
        public Int32 GetIVT_Result_T()
        {
            // Get bits from raw data storage and cast
            Int32 tempValue = (Int32)ExtractBits(IVT_Result_T);
            // Apply inverse transform to restore actual value
            tempValue  /= 10;
            tempValue  -= 0;
            return tempValue;
        }
        
        public void SetIVT_Result_T(Int32 value)
        {
            // Scale and offset value according to signal specification
            value += 0;
            value *= 10;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_Result_T, (UInt64)value);
        }
        public static readonly CanSignalType IVT_MuxID_T = CanSignalTypes.IVT_Msg_Result_T__IVT_MuxID_T;
        public sbyte GetIVT_MuxID_T()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(IVT_MuxID_T);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_MuxID_T(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_MuxID_T, (UInt64)value);
        }
    }
    
    
    public class IVT_Msg_Result_IMessage : CanMessageExtended<IVT_Msg_Result_IMessage>
    {
        public IVT_Msg_Result_IMessage()
        {
            MessageType = CanMessageTypes.IVT_Msg_Result_I;
            Id = 1313;
        }
        public static readonly CanSignalType IVT_ResultState_And_MsgCount_I = CanSignalTypes.IVT_Msg_Result_I__IVT_ResultState_And_MsgCount_I;
        public byte GetIVT_ResultState_And_MsgCount_I()
        {
            // Get bits from raw data storage and cast
            byte tempValue = (byte)ExtractBits(IVT_ResultState_And_MsgCount_I);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_ResultState_And_MsgCount_I(byte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_ResultState_And_MsgCount_I, (UInt64)value);
        }
        public static readonly CanSignalType IVT_Result_I = CanSignalTypes.IVT_Msg_Result_I__IVT_Result_I;
        public Int32 GetIVT_Result_I()
        {
            // Get bits from raw data storage and cast
            Int32 tempValue = (Int32)ExtractBits(IVT_Result_I);
            // Apply inverse transform to restore actual value
            tempValue  /= 1000;
            tempValue  -= 0;
            return tempValue;
        }
        
        public void SetIVT_Result_I(Int32 value)
        {
            // Scale and offset value according to signal specification
            value += 0;
            value *= 1000;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_Result_I, (UInt64)value);
        }
        public static readonly CanSignalType IVT_MuxID_I = CanSignalTypes.IVT_Msg_Result_I__IVT_MuxID_I;
        public sbyte GetIVT_MuxID_I()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(IVT_MuxID_I);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_MuxID_I(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_MuxID_I, (UInt64)value);
        }
    }
    
    
    public class IVT_Msg_Result_AsMessage : CanMessageExtended<IVT_Msg_Result_AsMessage>
    {
        public IVT_Msg_Result_AsMessage()
        {
            MessageType = CanMessageTypes.IVT_Msg_Result_As;
            Id = 1319;
        }
        public static readonly CanSignalType IVT_ResultState_And_MsgCount_As = CanSignalTypes.IVT_Msg_Result_As__IVT_ResultState_And_MsgCount_As;
        public byte GetIVT_ResultState_And_MsgCount_As()
        {
            // Get bits from raw data storage and cast
            byte tempValue = (byte)ExtractBits(IVT_ResultState_And_MsgCount_As);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_ResultState_And_MsgCount_As(byte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_ResultState_And_MsgCount_As, (UInt64)value);
        }
        public static readonly CanSignalType IVT_Result_As = CanSignalTypes.IVT_Msg_Result_As__IVT_Result_As;
        public Int32 GetIVT_Result_As()
        {
            // Get bits from raw data storage and cast
            Int32 tempValue = (Int32)ExtractBits(IVT_Result_As);
            // Apply inverse transform to restore actual value
            tempValue  /= 1000;
            tempValue  -= 0;
            return tempValue;
        }
        
        public void SetIVT_Result_As(Int32 value)
        {
            // Scale and offset value according to signal specification
            value += 0;
            value *= 1000;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_Result_As, (UInt64)value);
        }
        public static readonly CanSignalType IVT_MuxID_As = CanSignalTypes.IVT_Msg_Result_As__IVT_MuxID_As;
        public sbyte GetIVT_MuxID_As()
        {
            // Get bits from raw data storage and cast
            sbyte tempValue = (sbyte)ExtractBits(IVT_MuxID_As);
            // Apply inverse transform to restore actual value
            tempValue  *= 1;
            tempValue  += 0;
            return tempValue;
        }
        
        public void SetIVT_MuxID_As(sbyte value)
        {
            // Scale and offset value according to signal specification
            value -= 0;
            value /= 1;
            // Cats to integer and prepare for sending
            this.InsertBits(IVT_MuxID_As, (UInt64)value);
        }
    }
    

}
